!function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},r.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t){
/*!
 * @license :jsstore - V2.0.5 - 16/05/2018
 * https://github.com/ujjwalguptaofficial/JsStore
 * Copyright (c) 2018 @Ujjwal Gupta; Licensed MIT
 */!function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},r.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";r.r(t),r.d(t,"registerEvents",function(){return s});var n=r(1),o=r(8),i=r(19),s=function(){self.onmessage=function(e){var t;t="Request executing from WebWorker, request name: "+e.data.Name,o.LogHelper.log(t),(new i.QueryExecutor).checkConnectionAndExecuteLogic(e.data)}};s(),n.init()},function(e,t,r){"use strict";r.r(t);var n=r(2);r.d(t,"init",function(){return n.init}),r.d(t,"get",function(){return n.get}),r.d(t,"set",function(){return n.set}),r.d(t,"remove",function(){return n.remove})},function(e,t,r){"use strict";r.r(t),r.d(t,"init",function(){return i}),r.d(t,"get",function(){return s}),r.d(t,"set",function(){return u}),r.d(t,"remove",function(){return c});var n=r(3),o=r(10),i=function(){n.Utils.setDbType(),indexedDB&&o.QueryExecutor.prcoessQuery({Name:"create_db",Query:null})},s=function(e,t,r){void 0===r&&(r=null),o.QueryExecutor.prcoessQuery({Name:"get",OnError:r,OnSuccess:t,Query:e})},u=function(e,t,r,n){var i={Key:e,Value:t};o.QueryExecutor.prcoessQuery({Name:"set",OnError:n,OnSuccess:r,Query:i})},c=function(e,t,r){void 0===t&&(t=null),void 0===r&&(r=null),o.QueryExecutor.prcoessQuery({Name:"remove",OnError:r,OnSuccess:t,Query:e})}},function(e,t,r){"use strict";r.r(t),r.d(t,"Utils",function(){return i});var n=r(4),o=r(10),i=function(){function e(){}return e.setDbType=function(){indexedDB||(indexedDB=self.mozIndexedDB||self.webkitIndexedDB||self.msIndexedDB),indexedDB?(IDBTransaction=IDBTransaction||self.webkitIDBTransaction||self.msIDBTransaction,self.IDBKeyRange=self.IDBKeyRange||self.webkitIDBKeyRange||self.msIDBKeyRange):n.IdbHelper.dbStatus={conStatus:n.CONNECTION_STATUS.UnableToStart,lastError:n.ERROR_TYPE.IndexedDbUndefined}},e.updateDbStatus=function(e,t){void 0===t?o.QueryExecutor.dbStatus.conStatus=e:o.QueryExecutor.dbStatus={conStatus:e,lastError:t}},e}()},function(e,t,r){"use strict";r.r(t);var n=r(5);r.d(t,"IdbHelper",function(){return n.IdbHelper});var o=r(6);r.d(t,"OCCURENCE",function(){return o.OCCURENCE}),r.d(t,"WEBWORKER_STATUS",function(){return o.WEBWORKER_STATUS}),r.d(t,"CONNECTION_STATUS",function(){return o.CONNECTION_STATUS}),r.d(t,"DATA_TYPE",function(){return o.DATA_TYPE}),r.d(t,"ERROR_TYPE",function(){return o.ERROR_TYPE}),r.d(t,"QUERY_OPTION",function(){return o.QUERY_OPTION}),r.d(t,"IDB_MODE",function(){return o.IDB_MODE}),r.d(t,"API",function(){return o.API});var i=r(0);r.d(t,"registerEvents",function(){return i.registerEvents})},function(e,t,r){"use strict";r.r(t),r.d(t,"IdbHelper",function(){return s});var n=r(6),o=r(1),i=r(7),s=function(){function e(){}return e.callDbDroppedByBrowser=function(e){this.dbStatus.conStatus===n.CONNECTION_STATUS.Connected&&(this.isDbDeletedByBrowser=!0,!0===e&&new i.DropDb(this.onDbDroppedByBrowser,null).deleteMetaData())},e.createTransaction=function(e,t,r){var o=this;null===this.transaction&&(r=r||n.IDB_MODE.ReadWrite,this.transaction=this.dbConnection.transaction(e,r),this.transaction.oncomplete=function(){o.transaction=null,t()},this.transaction.ontimeout=function(){o.transaction=null,console.error("transaction timed out")})},e.setDbList=function(e){return new Promise(function(t,r){o.set("DataBase_List",e,t,r)})},e.updateDbStatus=function(e,t){void 0===t?this.dbStatus.conStatus=e:this.dbStatus={conStatus:e,lastError:t}},e.getDbList=function(e){o.get("DataBase_List",function(t){e(t=null==t?[]:t)})},e.getDbVersion=function(e,t){o.get("JsStore_"+e+"_Db_Version",function(e){t.call(this,Number(e))}.bind(this))},e.getDbSchema=function(e,t){o.get("JsStore_"+e+"_Schema",function(e){t(e)})},e.transaction=null,e.activeDbVersion=0,e.dbStatus={conStatus:n.CONNECTION_STATUS.NotStarted,lastError:null},e}()},function(e,t,r){"use strict";var n,o,i,s,u,c,a,l;r.r(t),r.d(t,"OCCURENCE",function(){return n}),r.d(t,"WEBWORKER_STATUS",function(){return o}),r.d(t,"CONNECTION_STATUS",function(){return i}),r.d(t,"DATA_TYPE",function(){return s}),r.d(t,"ERROR_TYPE",function(){return u}),r.d(t,"QUERY_OPTION",function(){return c}),r.d(t,"IDB_MODE",function(){return a}),r.d(t,"API",function(){return l}),function(e){e.First="f",e.Last="l",e.Any="a"}(n||(n={})),function(e){e.Registered="registerd",e.Failed="failed",e.NotStarted="not_started"}(o||(o={})),function(e){e.Connected="connected",e.Closed="closed",e.NotStarted="not_started",e.UnableToStart="unable_to_start",e.ClosedByJsStore="closed_by_jsstore"}(i||(i={})),function(e){e.String="string",e.Object="object",e.Array="array",e.Number="number",e.Boolean="boolean",e.Null="null",e.DateTime="date_time"}(s||(s={})),function(e){e.UndefinedColumn="undefined_column",e.UndefinedValue="undefined_value",e.UndefinedColumnName="undefined_column_name",e.UndefinedDbName="undefined_database_name",e.UndefinedColumnValue="undefined_column_value",e.NotArray="not_array",e.NoValueSupplied="no_value_supplied",e.ColumnNotExist="column_not_exist",e.EnableSearchOff="enable_search_off",e.InvalidOp="invalid_operator",e.NullValue="null_value",e.BadDataType="bad_data_type",e.NextJoinNotExist="next_join_not_exist",e.TableNotExist="table_not_exist",e.DbNotExist="db_not_exist",e.ConnectionAborted="connection_aborted",e.ConnectionClosed="connection_closed",e.NotObject="not_object",e.InvalidConfig="invalid_config",e.DbBlocked="Db_blocked",e.IndexedDbUndefined="indexeddb_undefined",e.IndexedDbBlocked="indexeddb_blocked"}(u||(u={})),function(e){e.Where="where",e.Like="like",e.In="in",e.Between="-",e.GreaterThan=">",e.LessThan="<",e.GreaterThanEqualTo=">=",e.LessThanEqualTo="<=",e.NotEqualTo="!=",e.Aggregate="aggregate",e.Max="max",e.Min="min",e.Avg="avg",e.Count="count",e.Sum="sum",e.Or="or",e.Skip="skip",e.Limit="limit",e.And="and"}(c||(c={})),function(e){e.ReadOnly="readonly",e.ReadWrite="readwrite"}(a||(a={})),function(e){e.CreateDb="create_db",e.IsDbExist="is_db_exist",e.GetDbVersion="get_db_version",e.GetDbList="get_db_list",e.Get="get",e.Set="set",e.Select="select",e.Insert="insert",e.Update="update",e.Remove="remove",e.GetDbSchema="get_db_schema",e.OpenDb="open_db",e.Clear="clear",e.DropDb="drop_db",e.Count="count",e.BulkInsert="bulk_insert",e.ExportJson="export_json",e.ChangeLogStatus="change_log_status"}(l||(l={}))},function(e,t,r){"use strict";r.r(t),r.d(t,"DropDb",function(){return u});var n=r(1),o=r(5),i=r(6),s=r(8),u=function(){function e(e,t){this.onSuccess_=e,this.onError_=t}return Object.defineProperty(e.prototype,"dbName_",{get:function(){return o.IdbHelper.activeDb.name},enumerable:!0,configurable:!0}),e.prototype.deleteMetaData=function(){var e=this;n.remove("JsStore_"+this.dbName_+"_Db_Version"),o.IdbHelper.activeDb.tables.forEach(function(t){n.remove("JsStore_"+e.dbName_+"_"+t.name+"_Version"),t.columns.forEach(function(r){r.autoIncrement&&n.remove("JsStore_"+e.dbName_+"_"+t.name+"_"+r.name+"_Value")})}),this.getDbList_(function(t){t.splice(t.indexOf(e.dbName_),1),o.IdbHelper.setDbList(t).then(function(){n.remove("JsStore_"+e.dbName_+"_Schema",e.onSuccess_)})})},e.prototype.getDbList_=function(e){o.IdbHelper.getDbList(e)},e.prototype.deleteDb=function(){var e=this;setTimeout(function(){var t=indexedDB.deleteDatabase(e.dbName_);t.onblocked=function(){null!=e.onError_&&e.onError_(new s.LogHelper(i.ERROR_TYPE.DbBlocked).get())},t.onerror=function(t){null!=e.onError_&&e.onError_(event.target.error)},t.onsuccess=function(){o.IdbHelper.dbStatus.conStatus=i.CONNECTION_STATUS.Closed,e.deleteMetaData()}},100)},e}()},function(e,t,r){"use strict";r.r(t),r.d(t,"LogHelper",function(){return i});var n=r(6),o=r(9),i=function(){function e(e,t){void 0===t&&(t=null),this.type=e,this.info_=t,this.message=this.getMsg_()}return e.prototype.throw=function(){throw this.get()},e.log=function(e){o.Config.isLogEnabled&&console.log(e)},e.prototype.logError=function(){console.error(this.get())},e.prototype.logWarning=function(){console.warn(this.get())},e.prototype.get=function(){return{message:this.message,type:this.type}},e.prototype.getMsg_=function(){var e;switch(this.type){case n.ERROR_TYPE.NotArray:e="Supplied value is not an array";break;case n.ERROR_TYPE.UndefinedColumn:e="Column is undefined in Where";break;case n.ERROR_TYPE.UndefinedValue:e="Value is undefined in Where";break;case n.ERROR_TYPE.UndefinedColumnName:e="Column name is undefined '"+this.info_.TableName+"'";break;case n.ERROR_TYPE.UndefinedDbName:e="Database name is not supplied";break;case n.ERROR_TYPE.UndefinedColumnValue:e="Column value is undefined";break;case n.ERROR_TYPE.NoValueSupplied:e="No value supplied";break;case n.ERROR_TYPE.InvalidOp:e="Invalid Op Value '"+this.info_.Op+"'";break;case n.ERROR_TYPE.ColumnNotExist:e="Column '"+this.info_.ColumnName+"' does not exist";break;case n.ERROR_TYPE.EnableSearchOff:e="Search is turned off for the Column '"+this.info_.ColumnName+"'";break;case n.ERROR_TYPE.NullValue:e="Null value is not allowed for column '"+this.info_.ColumnName+"'";break;case n.ERROR_TYPE.BadDataType:e="Supplied value for column '"+this.info_.ColumnName+"' does not have valid type";break;case n.ERROR_TYPE.NextJoinNotExist:e="Next join details not supplied";break;case n.ERROR_TYPE.TableNotExist:e="Table '"+this.info_.TableName+"' does not exist";break;case n.ERROR_TYPE.DbNotExist:e="Database '"+this.info_.DbName+"' does not exist";break;case n.ERROR_TYPE.NotObject:e="supplied value is not object";break;case n.ERROR_TYPE.InvalidOp:e="Invalid Config '"+this.info_.Config+" '";case n.ERROR_TYPE.DbBlocked:e="database is blocked, cant be deleted right now";default:e=this.message}return e},e}()},function(e,t,r){"use strict";r.r(t),r.d(t,"Config",function(){return n});var n=function(){function e(){}return e.isLogEnabled=!1,e}()},function(e,t,r){"use strict";r.r(t),r.d(t,"QueryExecutor",function(){return i});var n=r(11),o=r(12),i=function(){function e(){}return e.prcoessQuery=function(e){this.requestQueue.push(e),1===this.requestQueue.length&&this.executeCode()},e.executeCode=function(){var e=this;if(!this.isCodeExecuting&&this.requestQueue.length>0){this.isCodeExecuting=!0;var t={Name:this.requestQueue[0].Name,Query:this.requestQueue[0].Query};new o.Main(function(t){e.onQueryFinished(t)}).checkConnectionAndExecuteLogic(t)}},e.onQueryFinished=function(e){var t=this.requestQueue.shift();this.isCodeExecuting=!1,e.ErrorOccured?t.OnError?t.OnError(e.ErrorDetails):console.error(e.ErrorDetails):t.OnSuccess&&t.OnSuccess(e.ReturnedValue),this.executeCode()},e.requestQueue=[],e.tableName="LocalStore",e.columnName="Key",e.isCodeExecuting=!1,e.dbStatus={conStatus:n.CONNECTION_STATUS.NotStarted,lastError:""},e}()},function(e,t,r){"use strict";var n;r.r(t),r.d(t,"CONNECTION_STATUS",function(){return n}),function(e){e.Connected="connected",e.Closed="closed",e.NotStarted="not_connected"}(n||(n={}))},function(e,t,r){"use strict";r.r(t),r.d(t,"Main",function(){return l});var n=r(10),o=r(11),i=r(13),s=r(16),u=r(17),c=r(18),a=r(15),l=function(){function e(e){void 0===e&&(e=null),this.onSuccess=e}return e.prototype.set=function(e,t,r){new s.Set(e,t,r).execute()},e.prototype.remove=function(e,t,r){new i.Remove(e,t,r).execute()},e.prototype.get=function(e,t,r){new c.Get(e,t,r).execute()},e.prototype.createDb=function(e,t){new u.InitDb("KeyStore",e,t)},e.prototype.checkConnectionAndExecuteLogic=function(e){var t=this;if("create_db"===e.Name||"open_db"===e.Name)this.executeLogic(e);else switch(n.QueryExecutor.dbStatus.conStatus){case o.CONNECTION_STATUS.Connected:this.executeLogic(e);break;case o.CONNECTION_STATUS.NotStarted:setTimeout(function(){this.checkConnectionAndExecuteLogic(e)}.bind(this),100);break;case o.CONNECTION_STATUS.Closed:a.IdbHelper._isDbDeletedByBrowser&&this.createDb(function(){a.IdbHelper._isDbDeletedByBrowser=!1,t.checkConnectionAndExecuteLogic(e)},function(e){console.error(e)})}},e.prototype.returnResult=function(e){this.onSuccess&&this.onSuccess(e)},e.prototype.executeLogic=function(e){var t=this,r=function(e){t.returnResult({ReturnedValue:e})},n=function(e){t.returnResult({ErrorDetails:e,ErrorOccured:!0})};switch(e.Name){case"get":this.get(e.Query,r,n);break;case"set":this.set(e.Query,r,n);break;case"remove":this.remove(e.Query,r,n);break;case"create_db":this.createDb(r,n)}},e}()},function(e,t,r){"use strict";r.r(t),r.d(t,"Remove",function(){return c});var n,o=r(14),i=r(10),s=r(15),u=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),c=function(e){function t(t,r,n){var o=e.call(this)||this;return o.rowAffected=0,o.key=t,o.onSuccess=r,o.onError=n,o}return u(t,e),t.prototype.execute=function(){var e=this;this.initTransaction();var t,r,n;this.errorOccured||(t=i.QueryExecutor.columnName,r=this.key,(n=e.objectStore.index(t).openCursor(IDBKeyRange.only(r))).onerror=function(t){e.errorOccured=!0,e.onErrorOccured(t)},n.onsuccess=function(t){var r=t.target.result;r&&(r.delete(),++e.rowAffected,r.continue())})},t.prototype.initTransaction=function(){s.IdbHelper.createTransaction([i.QueryExecutor.tableName],this.onTransactionCompleted.bind(this)),this.objectStore=s.IdbHelper._transaction.objectStore(i.QueryExecutor.tableName)},t.prototype.onTransactionCompleted=function(){!1===this.errorOccured&&this.onSuccess(this.rowAffected)},t}(o.Base)},function(e,t,r){"use strict";r.r(t),r.d(t,"Base",function(){return n});var n=function(){function e(){this.results=null,this.errorOccured=!1,this.errorCount=0}return e.prototype.onErrorOccured=function(e){++this.errorCount,1===this.errorCount&&null!=this.onError&&this.onError(e.target.error),console.error(e)},e}()},function(e,t,r){"use strict";r.r(t),r.d(t,"IdbHelper",function(){return i});var n=r(10),o=r(11),i=function(){function e(){}return e.callDbDroppedByBrowser=function(){this._isDbDeletedByBrowser=n.QueryExecutor.dbStatus.conStatus===o.CONNECTION_STATUS.Connected},e.createTransaction=function(e,t,r){var n=this;null===this._transaction&&(r=r||"readwrite",this._transaction=this._dbConnection.transaction(e,r),this._transaction.oncomplete=function(){n._transaction=null,t()},this._transaction.ontimeout=function(){this._transaction=null,console.error("transaction timed out")})},e._transaction=null,e}()},function(e,t,r){"use strict";r.r(t),r.d(t,"Set",function(){return c});var n,o=r(14),i=r(15),s=r(10),u=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),c=function(e){function t(t,r,n){var o=e.call(this)||this;o.onTransactionCompleted_=function(){!1===o.errorOccured&&o.onSuccess&&o.onSuccess(null)};try{o.query=t,o.onSuccess=r,o.onError=n}catch(e){console.error(e)}return o}return u(t,e),t.prototype.execute=function(){var e,t=this,r=function(){t.objectStore.add(t.query).onerror=function(e){t.errorOccured=!0,t.onErrorOccured(e)}};this.initTransaction(),(e=t.objectStore.index(s.QueryExecutor.columnName).openCursor(IDBKeyRange.only(t.query[s.QueryExecutor.columnName]))).onsuccess=function(e){var n=e.target.result;n?n.update(t.query):r()},e.onerror=function(e){t.errorOccured=!0,t.onErrorOccured(e)}},t.prototype.initTransaction=function(){i.IdbHelper.createTransaction([s.QueryExecutor.tableName],this.onTransactionCompleted_),this.objectStore=i.IdbHelper._transaction.objectStore(s.QueryExecutor.tableName)},t}(o.Base)},function(e,t,r){"use strict";r.r(t),r.d(t,"tempDatas",function(){}),r.d(t,"InitDb",function(){return c});var n=r(4),o=r(11),i=r(3),s=r(15),u=r(10),c=function(){return function(e,t,r){var c=self.indexedDB.open(e,1);s.IdbHelper._isDbDeletedByBrowser=!1,c.onerror=function(e){"InvalidStateError"===e.target.error.name&&(n.IdbHelper.dbStatus={conStatus:n.CONNECTION_STATUS.UnableToStart,lastError:n.ERROR_TYPE.IndexedDbBlocked}),null!=r&&r(e.target.error)},c.onsuccess=function(e){u.QueryExecutor.dbStatus.conStatus=o.CONNECTION_STATUS.Connected,s.IdbHelper._dbConnection=c.result,s.IdbHelper._dbConnection.onclose=function(){s.IdbHelper.callDbDroppedByBrowser(),i.Utils.updateDbStatus(o.CONNECTION_STATUS.Closed,n.ERROR_TYPE.ConnectionClosed)},s.IdbHelper._dbConnection.onversionchange=function(e){null===e.newVersion&&(e.target.close(),s.IdbHelper.callDbDroppedByBrowser(),i.Utils.updateDbStatus(o.CONNECTION_STATUS.Closed,n.ERROR_TYPE.ConnectionClosed))},s.IdbHelper._dbConnection.onerror=function(e){u.QueryExecutor.dbStatus.lastError="Error occured in connection :"+e.target.result},s.IdbHelper._dbConnection.onabort=function(e){u.QueryExecutor.dbStatus={conStatus:o.CONNECTION_STATUS.Closed,lastError:"Connection aborted"}},null!=t&&t()},c.onupgradeneeded=function(e){e.target.result.createObjectStore(u.QueryExecutor.tableName,{keyPath:"Key"}).createIndex("Key","Key",{unique:!0})}}}()},function(e,t,r){"use strict";r.r(t),r.d(t,"Get",function(){return c});var n,o=r(14),i=r(10),s=r(15),u=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),c=function(e){function t(t,r,n){var o=e.call(this)||this;return o.onTransactionCompleted_=function(){!1===o.errorOccured&&o.onSuccess(o.results)},o.key=t,o.onSuccess=r,o.onError=n,o}return u(t,e),t.prototype.execute=function(){var e,t,r,n=this;this.initTransaction_(),e=i.QueryExecutor.columnName,t=this.key,(r=n.objectStore.index(e).openCursor(IDBKeyRange.only(t))).onerror=function(e){n.errorOccured=!0,n.onErrorOccured(e)},r.onsuccess=function(e){var t=e.target.result;t&&(n.results=t.value.Value)}},t.prototype.initTransaction_=function(){s.IdbHelper.createTransaction([i.QueryExecutor.tableName],this.onTransactionCompleted_,"readonly"),this.objectStore=s.IdbHelper._transaction.objectStore(i.QueryExecutor.tableName)},t}(o.Base)},function(e,t,r){"use strict";r.r(t),r.d(t,"QueryExecutor",function(){return m});var n=r(5),o=r(8),i=r(6),s=r(9),u=r(20),c=r(7),a=r(1),l=r(21),h=r(23),f=r(24),p=r(27),y=r(41),d=r(48),_=r(52),b=r(59),O=r(38),v=r(67),g=r(68),m=function(){function e(){}return e.prototype.checkConnectionAndExecuteLogic=function(e){var t=this;switch(o.LogHelper.log("checking connection and executing request:"+e.name),e.name){case i.API.CreateDb:case i.API.IsDbExist:case i.API.GetDbVersion:case i.API.GetDbList:case i.API.GetDbSchema:case i.API.Get:case i.API.Set:case i.API.ChangeLogStatus:case i.API.OpenDb:this.executeLogic_(e);break;default:switch(this.dbStatus_.conStatus){case i.CONNECTION_STATUS.Connected:this.executeLogic_(e);break;case i.CONNECTION_STATUS.Closed:!0===this.isDbDeletedByBrowser_?this.createDb_(null,function(){t.isDbDeletedByBrowser_=!1,t.checkConnectionAndExecuteLogic(e)},e.onError):this.openDb_(this.activeDb_.name,function(){t.checkConnectionAndExecuteLogic(e)},e.onError)}}},e.prototype.changeLogStatus_=function(e,t,r){s.Config.isLogEnabled=e,t()},e.prototype.returnResult_=function(e){self.postMessage(e)},e.prototype.executeLogic_=function(e){var t=this,r=function(e){t.returnResult_({returnedValue:e})},n=function(e){t.returnResult_({errorDetails:e,errorOccured:!0})};switch(e.name){case i.API.Select:this.select_(e.query,r,n);break;case i.API.Insert:this.insert_(e.query,r,n);break;case i.API.Update:this.update_(e.query,r,n);break;case i.API.Remove:this.remove_(e.query,r,n);break;case i.API.IsDbExist:this.isDbExist_(e.query,r,n);break;case i.API.GetDbVersion:this.getDbVersion_(e.query,r);break;case i.API.GetDbList:this.getDbList_(r);break;case i.API.GetDbSchema:this.getDbSchema_(e.query,r);break;case i.API.OpenDb:!0===this.isDbDeletedByBrowser_?this.createDb_(null,function(){t.isDbDeletedByBrowser_=!1,r()},n):this.openDb_(e.query,r,n);break;case i.API.CreateDb:this.createDb_(e.query,r,n);break;case i.API.Clear:this.clear_(e.query,r,n);break;case i.API.DropDb:this.dropDb_(r,n);break;case i.API.Count:this.count_(e.query,r,n);break;case i.API.BulkInsert:this.bulkInsert_(e.query,r,n);break;case i.API.ExportJson:this.exportJson_(e.query,r,n);break;case i.API.Get:this.get_(e.query,r,n);break;case i.API.Set:this.set_(e.query,r,n);break;case i.API.ChangeLogStatus:this.changeLogStatus_(e.query,r,n);break;default:console.error("The Api:-"+e.name+" does not support.")}},e.prototype.getDbSchema_=function(e,t){n.IdbHelper.getDbSchema(e,t)},Object.defineProperty(e.prototype,"isDbDeletedByBrowser_",{get:function(){return n.IdbHelper.isDbDeletedByBrowser},set:function(e){n.IdbHelper.isDbDeletedByBrowser=e},enumerable:!0,configurable:!0}),e.prototype.getDbList_=function(e){n.IdbHelper.getDbList(e)},Object.defineProperty(e.prototype,"activeDb_",{get:function(){return n.IdbHelper.activeDb},set:function(e){n.IdbHelper.activeDb=e},enumerable:!0,configurable:!0}),e.prototype.openDb_=function(e,t,r){var n=this;this.getDbVersion_(e,function(s){if(0!==s)n.activeDbVersion_=s,n.getDbSchema_(e,function(e){n.activeDb_=e,new u.OpenDb(t,r).execute()});else{var c=new o.LogHelper(i.ERROR_TYPE.DbNotExist,{DbName:e});c.logError(),r(c.get())}})},e.prototype.closeDb_=function(){n.IdbHelper.dbStatus.conStatus===i.CONNECTION_STATUS.Connected&&(n.IdbHelper.dbStatus.conStatus=i.CONNECTION_STATUS.ClosedByJsStore,n.IdbHelper.dbConnection.close())},e.prototype.dropDb_=function(e,t){this.closeDb_(),new c.DropDb(e,t).deleteDb()},e.prototype.update_=function(e,t,r){new b.Instance(e,t,r).execute()},e.prototype.insert_=function(e,t,r){new d.Instance(e,t,r).execute()},e.prototype.bulkInsert_=function(e,t,r){new g.BulkInsert(e,t,r).execute()},e.prototype.remove_=function(e,t,r){new _.Instance(e,t,r).execute()},e.prototype.select_=function(e,t,r){"object"==typeof e.from?new p.Join(e,t,r):new p.Instance(e,t,r).execute()},e.prototype.count_=function(e,t,r){if("object"==typeof e.from){e.count=!0;new p.Join(e,t,r)}else{new y.Instance(e,t,r).execute()}},e.prototype.createDb_=function(e,t,r){var o=this,i=function(){a.set("JsStore_"+o.activeDb_.name+"_Schema",o.activeDb_),new l.DbHelper(n.IdbHelper.activeDb).createMetaData(function(e){new h.CreateDb(e,t,r)})};null==e?i():(this.closeDb_(),this.getDbVersion_(e.name,function(t){o.activeDbVersion_=t||1,n.IdbHelper.activeDb=new f.DataBase(e),i()}))},Object.defineProperty(e.prototype,"activeDbVersion_",{get:function(){return n.IdbHelper.activeDbVersion},set:function(e){n.IdbHelper.activeDbVersion=e},enumerable:!0,configurable:!0}),e.prototype.getDbVersion_=function(e,t){n.IdbHelper.getDbVersion(e,t)},Object.defineProperty(e.prototype,"dbStatus_",{get:function(){return n.IdbHelper.dbStatus},enumerable:!0,configurable:!0}),e.prototype.clear_=function(e,t,r){new v.Clear(e,t,r).execute()},e.prototype.exportJson_=function(e,t,r){this.select_(e,function(e){var r=URL.createObjectURL(new Blob([JSON.stringify(e)],{type:"text/json"}));t(r)},function(e){r(e)})},e.prototype.getType_=function(e){return O.Util.getType(e)},e.prototype.isDbExist_=function(e,t,r){if(this.dbStatus_.conStatus!==i.CONNECTION_STATUS.UnableToStart)this.getType_(e)===i.DATA_TYPE.String?this.getDbVersion_(e,function(e){t(Boolean(e))}):this.getDbVersion_(e.dbName,function(r){t(e.table.version<=r)});else{var n={message:null,type:this.dbStatus_.lastError};switch(n.type){case i.ERROR_TYPE.IndexedDbBlocked:n.message="IndexedDB is blocked";break;case i.ERROR_TYPE.IndexedDbUndefined:n.message="IndexedDB is not supported"}r(n)}},e.prototype.get_=function(e,t,r){a.get(e,t,r)},e.prototype.set_=function(e,t,r){a.set(e.key,e.value,t,r)},e}()},function(e,t,r){"use strict";r.r(t),r.d(t,"OpenDb",function(){return s});var n=r(5),o=r(6),i=r(8),s=function(){function e(e,t){this.dbName_=n.IdbHelper.activeDb.name,this.onSuccess_=e,this.onError_=t}return Object.defineProperty(e.prototype,"dbStatus_",{get:function(){return n.IdbHelper.dbStatus},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"dbConnection_",{get:function(){return n.IdbHelper.dbConnection},set:function(e){n.IdbHelper.dbConnection=e},enumerable:!0,configurable:!0}),e.prototype.updateDbStatus_=function(e,t){n.IdbHelper.updateDbStatus(e,t)},e.prototype.onDbDroppedByBrowser_=function(e){n.IdbHelper.callDbDroppedByBrowser(e)},e.prototype.execute=function(){var e=this;if(this.dbName_.length>0){var t=indexedDB.open(this.dbName_,n.IdbHelper.activeDbVersion);t.onerror=function(t){null!=e.onError_&&e.onError_(t.target.error)},t.onsuccess=function(r){e.dbStatus_.conStatus=o.CONNECTION_STATUS.Connected,e.dbConnection_=t.result,e.dbConnection_.onclose=function(t){e.onDbDroppedByBrowser_(),e.updateDbStatus_(o.CONNECTION_STATUS.Closed,o.ERROR_TYPE.ConnectionClosed)},e.dbConnection_.onversionchange=function(t){null===t.newVersion&&null===t.newVersion&&(t.target.close(),e.onDbDroppedByBrowser_(!0),e.updateDbStatus_(o.CONNECTION_STATUS.Closed,o.ERROR_TYPE.ConnectionClosed))},n.IdbHelper.dbConnection.onerror=function(e){n.IdbHelper.dbStatus.lastError="Error occured in connection :"+e.target.result},n.IdbHelper.dbConnection.onabort=function(e){n.IdbHelper.dbStatus={conStatus:o.CONNECTION_STATUS.Closed,lastError:o.ERROR_TYPE.ConnectionAborted}},null!=e.onSuccess_&&e.onSuccess_(),e.setPrimaryKey_()}}else{new i.LogHelper(o.ERROR_TYPE.UndefinedDbName).throw()}},Object.defineProperty(e.prototype,"activeDb_",{get:function(){return n.IdbHelper.activeDb},enumerable:!0,configurable:!0}),e.prototype.setPrimaryKey_=function(){this.activeDb_.tables.forEach(function(e,t){e.columns.every(function(e){return n.IdbHelper.activeDb.tables[t].primaryKey=e.primaryKey?e.name:"",!e.primaryKey})})},e}()},function(e,t,r){"use strict";r.r(t),r.d(t,"DbHelper",function(){return o});var n=r(22),o=function(){function e(e){this.tables=[],this.name=e.name,this.tables=e.tables}return e.prototype.createMetaData=function(e){var t=this,r=0,o=[],i=function(){if(r<t.tables.length){var s=t.tables[r],u=new n.TableHelper(s);u.createMetaData(t.name,function(){u.callback=null,o.push(u),i()}),++r}else e(o)};i()},e}()},function(e,t,r){"use strict";r.r(t),r.d(t,"TableHelper",function(){return i});var n=r(1),o=r(5),i=function(){function e(e){this.columns=[],this.requireDelete=!1,this.requireCreation=!1,this.name=e.name,this.version=e.version,this.columns=e.columns,this.setPrimaryKey_()}return e.prototype.createMetaData=function(e,t){this.callback=t,this.setRequireDelete_(e),this.setDbVersion_(e)},e.prototype.setPrimaryKey_=function(){var e=this;this.columns.every(function(t){return e.primaryKey=t.primaryKey?t.name:"",!t.primaryKey})},e.prototype.setRequireDelete_=function(e){var t=this;n.get("JsStore_"+e+"_"+this.name+"_Version",function(e){null==e?t.requireCreation=!0:e<t.version&&(t.requireDelete=!0)})},e.prototype.setDbVersion_=function(e){o.IdbHelper.activeDbVersion=o.IdbHelper.activeDbVersion>this.version?o.IdbHelper.activeDbVersion:this.version,n.set("JsStore_"+e+"_Db_Version",o.IdbHelper.activeDbVersion),n.set("JsStore_"+e+"_"+this.name+"_Version",o.IdbHelper.activeDbVersion,this.callback),this.version=o.IdbHelper.activeDbVersion},e}()},function(e,t,r){"use strict";r.r(t),r.d(t,"CreateDb",function(){return s});var n=r(5),o=r(6),i=r(1),s=function(){function e(e,t,r){var s=this;this.dbName_=this.activeDb_.name;var u=[],c=indexedDB.open(this.dbName_,this.dbVersion_);c.onerror=function(e){null!=r&&r(e.target.error)},c.onsuccess=function(e){s.dbStatus_.conStatus=o.CONNECTION_STATUS.Connected,s.dbConnection_=c.result,s.dbConnection_.onclose=function(e){n.IdbHelper.callDbDroppedByBrowser(),n.IdbHelper.updateDbStatus(o.CONNECTION_STATUS.Closed,o.ERROR_TYPE.ConnectionClosed)},s.dbConnection_.onversionchange=function(e){null===e.newVersion&&(e.target.close(),n.IdbHelper.callDbDroppedByBrowser(!0),n.IdbHelper.updateDbStatus(o.CONNECTION_STATUS.Closed,o.ERROR_TYPE.ConnectionClosed))},s.dbConnection_.onerror=function(e){n.IdbHelper.dbStatus.lastError="Error occured in connection :"+e.target.result},s.dbConnection_.onabort=function(e){s.dbStatus_={conStatus:o.CONNECTION_STATUS.Closed,lastError:o.ERROR_TYPE.ConnectionAborted}},s.saveDbName_(),null!=t&&t(u)},c.onupgradeneeded=function(t){var r=t.target.result,o=function(e,t){try{if(e.primaryKey.length>0){n.IdbHelper.activeDb.tables[t].primaryKey=e.primaryKey;var o=r.createObjectStore(e.name,{keyPath:e.primaryKey});e.columns.forEach(function(t){if(!0===t.enableSearch){var r=t.primaryKey?{unique:!0}:{unique:t.unique};r.multiEntry=t.multiEntry,o.createIndex(t.name,t.name,r),t.autoIncrement&&i.set("JsStore_"+s.dbName_+"_"+e.name+"_"+t.name+"_Value",0)}})}else{var c=r.createObjectStore(e.name,{autoIncrement:!0});e.columns.forEach(function(t){var r={unique:t.unique,multiEntry:t.multiEntry};c.createIndex(t.name,t.name,r),t.autoIncrement&&i.set("JsStore_"+s.dbName_+"_"+e.name+"_"+t.name+"_Value",0)})}u.push(e.name),i.set("JsStore_"+s.dbName_+"_"+e.name+"_Version",e.version)}catch(e){console.error(e)}};e.forEach(function(e,t){e.requireDelete?(r.objectStoreNames.contains(e.name)&&r.deleteObjectStore(e.name),o(e,t)):e.requireCreation&&o(e,t)})}}return Object.defineProperty(e.prototype,"activeDb_",{get:function(){return n.IdbHelper.activeDb},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"dbVersion_",{get:function(){return n.IdbHelper.activeDbVersion},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"dbStatus_",{get:function(){return n.IdbHelper.dbStatus},set:function(e){n.IdbHelper.dbStatus=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"dbConnection_",{get:function(){return n.IdbHelper.dbConnection},set:function(e){n.IdbHelper.dbConnection=e},enumerable:!0,configurable:!0}),e.prototype.getDbList_=function(e){n.IdbHelper.getDbList(e)},e.prototype.saveDbName_=function(){var e=this;this.getDbList_(function(t){t.indexOf(e.dbName_)<0&&(t.push(e.dbName_),n.IdbHelper.setDbList(t))})},e}()},function(e,t,r){"use strict";r.r(t),r.d(t,"DataBase",function(){return o});var n=r(25),o=function(){return function(e){var t=this;this.tables=[],this.name=e.name,e.tables.forEach(function(e){t.tables.push(new n.Table(e))})}}()},function(e,t,r){"use strict";r.r(t),r.d(t,"Table",function(){return o});var n=r(26),o=function(){return function(e){var t=this;this.columns=[],this.name=e.name,this.version=null==e.version?1:e.version,e.columns.forEach(function(r){t.columns.push(new n.Column(r,e.name))})}}()},function(e,t,r){"use strict";r.r(t),r.d(t,"Column",function(){return i});var n=r(8),o=r(6),i=function(){return function(e,t){null!=e.name?this.name=e.name:new n.LogHelper(o.ERROR_TYPE.UndefinedColumnName,{TableName:t}).throw(),this.autoIncrement=null!=e.autoIncrement&&e.autoIncrement,this.primaryKey=null!=e.primaryKey&&e.primaryKey,this.unique=null!=e.unique&&e.unique,this.notNull=null!=e.notNull&&e.notNull,this.dataType=null!=e.dataType?e.dataType:e.autoIncrement?"number":null,this.default=e.default,this.multiEntry=null!=e.multiEntry&&e.multiEntry,this.enableSearch=null==e.enableSearch||e.enableSearch}}()},function(e,t,r){"use strict";r.r(t);var n=r(28);r.d(t,"Instance",function(){return n.Instance});var o=r(40);r.d(t,"Join",function(){return o.Join})},function(e,t,r){"use strict";r.r(t),r.d(t,"Instance",function(){return c});var n,o=r(29),i=r(8),s=r(6),u=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),c=function(e){function t(t,r,n){var o=e.call(this)||this;return o.onTransactionCompleted_=function(){if(!1===o.errorOccured){if(o.processOrderBy(),o.query.distinct){var e=[],t=o.results[0];for(var r in t)e.push(r);var n=o.getPrimaryKey(o.query.from),i=e.indexOf(n);e.splice(i,1),o.query.groupBy=e.length>0?e:null}o.query.groupBy?o.query.aggregate?o.executeAggregateGroupBy():o.processGroupBy():o.query.aggregate&&o.processAggregateQry(),o.onSuccess(o.results)}},o.onError=n,o.onSuccess=r,o.query=t,o.skipRecord=t.skip,o.limitRecord=t.limit,o.tableName=t.from,o}return u(t,e),t.prototype.execute=function(){if(!0===this.isTableExist(this.tableName))try{void 0!==this.query.where?(this.addGreatAndLessToNotOp(),this.initTransaction_(),Array.isArray(this.query.where)?this.processWhereArrayQry():this.processWhere_()):(this.initTransaction_(),this.executeWhereUndefinedLogic())}catch(e){this.errorOccured=!0,this.onExceptionOccured(e,{TableName:this.query.from})}else this.errorOccured=!0,this.onErrorOccured(new i.LogHelper(s.ERROR_TYPE.TableNotExist,{TableName:this.query.from}),!0)},t.prototype.processWhereArrayQry=function(){var e=this;this.isArrayQry=!0;var t,r=this.query.where,n=this.getPrimaryKey(this.query.from),o=!0,i=[],u=function(){if(t===s.QUERY_OPTION.And){var u=function(){var t=[];e.results.forEach(function(e){var r;r=e[n],i.findIndex(function(e){return e[n]===r})>=0&&t.push(e)}),i=t,t=null};i.length>0?u():!0===o?i=e.results:u()}else i.length>0?(e.results=i.concat(e.results),e.removeDuplicates(),i=e.results):i=e.results;r.length>0?(e.results=[],c()):e.results=i,o=!1},c=function(){e.query.where=r.shift(),e.query.where[s.QUERY_OPTION.Or]&&1===Object.keys(e.query.where).length?(t=s.QUERY_OPTION.Or,e.query.where=e.query.where[s.QUERY_OPTION.Or],e.onWhereArrayQrySuccess=u):(t=s.QUERY_OPTION.And,e.onWhereArrayQrySuccess=u),e.processWhere_()};c()},t.prototype.onQueryFinished=function(){!0===this.isOr?this.orQuerySuccess_():!0===this.isArrayQry?this.onWhereArrayQrySuccess():!0===this.isTransaction&&this.onTransactionCompleted_()},t.prototype.initTransaction_=function(){this.createTransaction([this.tableName],this.onTransactionCompleted_,s.IDB_MODE.ReadOnly),this.objectStore=this.transaction.objectStore(this.tableName)},t.prototype.processWhere_=function(){this.query.where.or&&this.processOrLogic_(),this.goToWhereLogic()},t.prototype.orQueryFinish_=function(){this.isOr=!1,this.results=this.orInfo.results,this.orInfo=void 0,this.removeDuplicates(),this.onQueryFinished()},t.prototype.orQuerySuccess_=function(){if(this.orInfo.results=this.orInfo.results.concat(this.results),!this.query.limit||this.query.limit>this.orInfo.results.length){this.results=[];var e=this.getObjectFirstKey(this.orInfo.orQuery);if(null!=e){var t={};t[e]=this.orInfo.orQuery[e],delete this.orInfo.orQuery[e],this.query.where=t,this.goToWhereLogic()}else this.orQueryFinish_()}else this.orQueryFinish_()},t.prototype.processOrLogic_=function(){this.isOr=!0,this.orInfo={orQuery:this.query.where.or,results:[]},delete this.query.where.or},t}(o.Helper)},function(e,t,r){"use strict";r.r(t),r.d(t,"Helper",function(){return u});var n,o=r(30),i=r(6),s=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),u=function(e){function t(){return e.call(this)||this}return s(t,e),t.prototype.processOrderBy=function(){var e=this,t=this.query.order;if(t&&this.results.length>0&&!this.sorted&&t.by){t.type=t.type?t.type.toLowerCase():"asc";var r=t.by;typeof this.results[0][r]===i.DATA_TYPE.String?"asc"===t.type?e.results.sort(function(e,t){return e[r].toLowerCase().localeCompare(t[r].toLowerCase())}):e.results.sort(function(e,t){return t[r].toLowerCase().localeCompare(e[r].toLowerCase())}):typeof this.results[0][r]===i.DATA_TYPE.Number&&("asc"===t.type?e.results.sort(function(e,t){return e[r]-t[r]}):e.results.sort(function(e,t){return t[r]-e[r]}))}},t.prototype.processAggregateQry=function(){var e,t=this.results,r={};for(var n in this.results=void 0,this.query.aggregate){var o=this.query.aggregate[n],s=this.getType(o);switch(n){case"count":var u=function(){var r=0;for(var n in t)r+=t[n][e]?1:0;return r};if(s===i.DATA_TYPE.String)r["count("+(e=o)+")"]=u();else if(s===i.DATA_TYPE.Array)for(var c in o)r["count("+(e=o[c])+")"]=u();break;case"max":var a=function(){var r=0;for(var n in t)r=r>t[n][e]?r:t[n][e];return r};if(s===i.DATA_TYPE.String)r["max("+(e=o)+")"]=a();else if(s===i.DATA_TYPE.Array)for(var c in o)r["max("+(e=o[c])+")"]=a();break;case"min":var l=function(){var r=1/0,n=1/0;for(var o in t)r=r<(n=t[o][e]?t[o][e]:1/0)?r:n;return r};if(s===i.DATA_TYPE.String)r["min("+(e=o)+")"]=l();else if(s===i.DATA_TYPE.Array)for(var c in o)r["min("+(e=o[c])+")"]=l();break;case"sum":var h=function(){var r=0;for(var n in t)r+=t[n][e];return r};if(s===i.DATA_TYPE.String)r["sum("+(e=o)+")"]=h();else if(s===i.DATA_TYPE.Array)for(var c in o)r["sum("+(e=o[c])+")"]=h();break;case"avg":var f=function(){var r=0;for(var n in t)r+=t[n][e];return r/t.length};if(s===i.DATA_TYPE.String)r["avg("+(e=o)+")"]=f();else if(s===i.DATA_TYPE.Array)for(var c in o)r["avg("+(e=o[c])+")"]=f()}}for(var n in r)t[0][n]=r[n];this.results=t},t}(o.GroupByHelper)},function(e,t,r){"use strict";r.r(t),r.d(t,"GroupByHelper",function(){return u});var n,o=r(31),i=r(6),s=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),u=function(e){function t(){return e.call(this)||this}return s(t,e),t.prototype.processGroupBy=function(){var e=this.query.groupBy,t=this.results,r={};if(this.results=this.query.groupBy=void 0,this.getType(e)===i.DATA_TYPE.String)for(var n in t)r[t[n][e]]=t[n];else{var o=void 0;for(var n in t){for(var s in o="",e)o+=t[n][e[s]];r[o]=t[n]}}for(var n in t=[],r)t.push(r[n]);this.results=t},t.prototype.executeAggregateGroupBy=function(){var e,t,r,n,o=this,s=this.query.groupBy,u=this.results,c={},a=this.query.aggregate;this.query.aggregate=void 0,this.results=void 0;var l=function(){for(var s in a){var l=a[s],h=o.getType(l);switch(s){case i.QUERY_OPTION.Count:var f=function(){return r=(r=c[t])?r["count("+n+")"]:0,r+=u[e][n]?1:0};if(h===i.DATA_TYPE.String)n=l,u[e]["count("+n+")"]=f();else if(h===i.DATA_TYPE.Array)for(var p in l)n=l[p],u[e]["count("+n+")"]=f();break;case i.QUERY_OPTION.Max:var y=function(){return r=(r=c[t])?r["max("+n+")"]:0,u[e][n]=u[e][n]?u[e][n]:0,r>u[e][n]?r:u[e][n]};if(h===i.DATA_TYPE.String)n=l,u[e]["max("+n+")"]=y();else if(h===i.DATA_TYPE.Array)for(var p in l)n=l[p],u[e]["max("+n+")"]=y();break;case i.QUERY_OPTION.Min:var d=function(){return r=(r=c[t])?r["min("+n+")"]:1/0,u[e][n]=u[e][n]?u[e][n]:1/0,r<u[e][n]?r:u[e][n]};if(h===i.DATA_TYPE.String)n=l,u[e]["min("+n+")"]=d();else if(h===i.DATA_TYPE.Array)for(var p in l)n=l[p],u[e]["min("+n+")"]=d();break;case i.QUERY_OPTION.Sum:var _=function(){return r=(r=c[t])?r["sum("+n+")"]:0,r+=u[e][n]?u[e][n]:0};if(h===i.DATA_TYPE.String)n=l,u[e]["sum("+n+")"]=_();else if(h===i.DATA_TYPE.Array)for(var p in l)n=l[p],u[e]["sum("+n+")"]=_();break;case i.QUERY_OPTION.Avg:var b=function(){var o=(r=c[t])?r["sum("+n+")"]:0;o+=u[e][n]?u[e][n]:0,u[e]["sum("+n+")"]=o,r=r?r["count("+n+")"]:0,r+=u[e][n]?1:0,u[e]["count("+n+")"]=r};if(h===i.DATA_TYPE.String)n=l,b();else if(h===i.DATA_TYPE.Array)for(var p in l)n=l[p],b()}}};if(this.getType(s)===i.DATA_TYPE.String)for(e in u)t=u[e][s],l(),c[t]=u[e];else for(e in u){for(var h in t="",s)t+=u[e][s[h]];l(),c[t]=u[e]}for(var f in u=[],c)u.push(c[f]);if(a.avg)if(this.getType(a.avg)===i.DATA_TYPE.String)for(e in u){var p=u[e]["sum("+a.avg+")"],y=u[e]["count("+a.avg+")"];u[e]["avg("+a.avg+")"]=p/y,a.count!==a.avg&&delete u[e]["count("+a.avg+")"],a.sum!==a.avg&&delete u[e]["sum("+a.avg+")"]}else{var d=this.getType(a.count)===i.DATA_TYPE.String,_=this.getType(a.sum)===i.DATA_TYPE.String;for(e in u)for(var h in a.avg){var b=a.avg[h],O=u[e]["sum("+b+")"],v=u[e]["count("+b+")"];u[e]["avg("+b+")"]=O/v,d&&(a.count!==b?delete u[e]["count("+b+")"]:-1===a.count.indexOf(b)&&delete u[e]["count("+b+")"]),_&&(a.sum!==b?delete u[e]["sum("+b+")"]:-1===a.sum.indexOf(b)&&delete u[e]["sum("+b+")"])}}this.results=u},t}(o.Where)},function(e,t,r){"use strict";r.r(t),r.d(t,"Where",function(){return s});var n,o=r(32),i=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),s=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.executeSkipAndLimitForWhere_=function(){var e,t=this,r=!1;this.checkFlag?this.cursorOpenRequest.onsuccess=function(n){(e=n.target.result)?r&&t.results.length!==t.limitRecord?(t.whereCheckerInstance.check(e.value)&&t.results.push(e.value),e.continue()):(r=!0,e.advance(t.skipRecord)):t.onQueryFinished()}:this.cursorOpenRequest.onsuccess=function(n){(e=n.target.result)?r&&t.results.length!==t.limitRecord?(t.results.push(e.value),e.continue()):(r=!0,e.advance(t.skipRecord)):t.onQueryFinished()}},t.prototype.executeSkipForWhere_=function(){var e,t=this,r=!1;this.checkFlag?this.cursorOpenRequest.onsuccess=function(n){(e=n.target.result)?r?(t.whereCheckerInstance.check(e.value)&&t.results.push(e.value),e.continue()):(r=!0,e.advance(t.skipRecord)):t.onQueryFinished()}:this.cursorOpenRequest.onsuccess=function(n){(e=n.target.result)?r?(t.results.push(e.value),e.continue()):(r=!0,e.advance(t.skipRecord)):t.onQueryFinished()}},t.prototype.executeLimitForWhere_=function(){var e,t=this;this.checkFlag?this.cursorOpenRequest.onsuccess=function(r){(e=r.target.result)&&t.results.length!==t.limitRecord&&t.whereCheckerInstance.check(e.value)?(t.results.push(e.value),e.continue()):t.onQueryFinished()}:this.cursorOpenRequest.onsuccess=function(r){(e=r.target.result)&&t.results.length!==t.limitRecord?(t.results.push(e.value),e.continue()):t.onQueryFinished()}},t.prototype.executeSimpleForWhere_=function(){var e,t=this;this.checkFlag?this.cursorOpenRequest.onsuccess=function(r){(e=r.target.result)?(t.whereCheckerInstance.check(e.value)&&t.results.push(e.value),e.continue()):t.onQueryFinished()}:this.cursorOpenRequest.onsuccess=function(r){(e=r.target.result)?(t.results.push(e.value),e.continue()):t.onQueryFinished()}},t.prototype.executeWhereLogic=function(e,t,r,n){var o=this;t=r?t[r]:t,this.cursorOpenRequest=this.objectStore.index(e).openCursor(this.getKeyRange(t,r),n),this.cursorOpenRequest.onerror=function(e){o.errorOccured=!0,o.onErrorOccured(e)},this.skipRecord&&this.limitRecord?this.executeSkipAndLimitForWhere_():this.skipRecord?this.executeSkipForWhere_():this.limitRecord?this.executeLimitForWhere_():this.executeSimpleForWhere_()},t}(o.Like)},function(e,t,r){"use strict";r.r(t),r.d(t,"Like",function(){return s});var n,o=r(33),i=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),s=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.executeLikeLogic=function(e,t,r){this.compValue=t.toLowerCase(),this.compValueLength=this.compValue.length,this.compSymbol=r,this.cursorOpenRequest=this.objectStore.index(e).openCursor(),this.cursorOpenRequest.onerror=this.onCursorError,this.skipRecord&&this.limitRecord?this.executeSkipAndLimit_():this.skipRecord?this.executeSkip_():this.limitRecord?this.executeLimit_():this.executeSimple_()},t.prototype.executeSkipAndLimit_=function(){var e,t=this,r=function(e){0===n?t.results.push(e):--n},n=this.skipRecord;this.checkFlag?this.cursorOpenRequest.onsuccess=function(n){e=n.target.result,t.results.length!==t.limitRecord&&e?(t.filterOnOccurence(e.key)&&t.whereCheckerInstance.check(e.value)&&r(e.value),e.continue()):t.onQueryFinished()}:this.cursorOpenRequest.onsuccess=function(n){e=n.target.result,t.results.length!==t.limitRecord&&e?(t.filterOnOccurence(e.key)&&r(e.value),e.continue()):t.onQueryFinished()}},t.prototype.executeSkip_=function(){var e,t=this,r=this.skipRecord,n=function(e){0===r?t.results.push(e):--r};this.checkFlag?this.cursorOpenRequest.onsuccess=function(r){(e=r.target.result)?(t.filterOnOccurence(e.key)&&t.whereCheckerInstance.check(e.value)&&n(e.value),e.continue()):t.onQueryFinished()}:this.cursorOpenRequest.onsuccess=function(r){(e=r.target.result)?(t.filterOnOccurence(e.key)&&n(e.value),e.continue()):t.onQueryFinished()}},t.prototype.executeLimit_=function(){var e,t=this;this.checkFlag?this.cursorOpenRequest.onsuccess=function(r){e=r.target.result,t.results.length!==t.limitRecord&&e?(t.filterOnOccurence(e.key)&&t.whereCheckerInstance.check(e.value)&&t.results.push(e.value),e.continue()):t.onQueryFinished()}:this.cursorOpenRequest.onsuccess=function(r){e=r.target.result,t.results.length!==t.limitRecord&&e?(t.filterOnOccurence(e.key)&&t.results.push(e.value),e.continue()):t.onQueryFinished()}},t.prototype.executeSimple_=function(){var e,t=this;this.checkFlag?this.cursorOpenRequest.onsuccess=function(r){(e=r.target.result)?(t.filterOnOccurence(e.key)&&t.whereCheckerInstance.check(e.value)&&t.results.push(e.value),e.continue()):t.onQueryFinished()}:this.cursorOpenRequest.onsuccess=function(r){(e=r.target.result)?(t.filterOnOccurence(e.key)&&t.results.push(e.value),e.continue()):t.onQueryFinished()}},t}(o.In)},function(e,t,r){"use strict";r.r(t),r.d(t,"In",function(){return s});var n,o=r(34),i=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),s=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.executeInLogic=function(e,t){this.skipRecord&&this.limitRecord?this.executeSkipAndLimitForIn_(e,t):this.skipRecord?this.executeSkipForIn_(e,t):this.limitRecord?this.executeLimitForIn_(e,t):this.executeSimpleForIn_(e,t)},t.prototype.executeSkipAndLimitForIn_=function(e,t){var r,n,o=this,i=this.skipRecord,s=this.objectStore.index(e),u=function(e){0===i?o.results.push(e):--i},c=t.length,a=0,l=function(){++a===c&&o.onQueryFinished()};if(this.checkFlag)for(var h=0;h<c;h++)this.errorOccured||((n=s.openCursor(IDBKeyRange.only(t[h]))).onsuccess=function(e){r=e.target.result,o.results.length!==o.limitRecord&&r?(o.whereCheckerInstance.check(r.value)&&u(r.value),r.continue()):l()},n.onerror=this.onCursorError);else for(h=0;h<c;h++)this.errorOccured||((n=s.openCursor(IDBKeyRange.only(t[h]))).onsuccess=function(e){r=e.target.result,o.results.length!==o.limitRecord&&r?(u(r.value),r.continue()):l()},n.onerror=this.onCursorError)},t.prototype.executeSkipForIn_=function(e,t){var r,n,o=this,i=this.skipRecord,s=this.objectStore.index(e),u=function(e){0===i?o.results.push(e):--i},c=t.length,a=0,l=function(){++a===c&&o.onQueryFinished()};if(this.checkFlag)for(var h=0;h<c;h++)this.errorOccured||((n=s.openCursor(IDBKeyRange.only(t[h]))).onsuccess=function(e){(r=e.target.result)?(o.whereCheckerInstance.check(r.value)&&u(r.value),r.continue()):l()},n.onerror=this.onCursorError);else for(h=0;h<c;h++)this.errorOccured||((n=s.openCursor(IDBKeyRange.only(t[h]))).onsuccess=function(e){(r=e.target.result)?(u(r.value),r.continue()):l()},n.onerror=this.onCursorError)},t.prototype.executeLimitForIn_=function(e,t){var r,n,o=this,i=this.objectStore.index(e),s=t.length,u=0,c=function(){++u===s&&o.onQueryFinished()};if(this.checkFlag)for(var a=0;a<s;a++)this.errorOccured||((n=i.openCursor(IDBKeyRange.only(t[a]))).onsuccess=function(e){(r=e.target.result)&&o.results.length!==o.limitRecord?(o.whereCheckerInstance.check(r.value)&&o.results.push(r.value),r.continue()):c()},n.onerror=this.onCursorError);else for(a=0;a<s;a++)this.errorOccured||((n=i.openCursor(IDBKeyRange.only(t[a]))).onsuccess=function(e){(r=e.target.result)&&o.results.length!==o.limitRecord?(o.results.push(r.value),r.continue()):c()},n.onerror=this.onCursorError)},t.prototype.executeSimpleForIn_=function(e,t){var r,n,o=this,i=this.objectStore.index(e),s=t.length,u=0,c=function(){++u===s&&o.onQueryFinished()};if(this.checkFlag)for(var a=0;a<s;a++)this.errorOccured||((n=i.openCursor(IDBKeyRange.only(t[a]))).onsuccess=function(e){(r=e.target.result)?(o.whereCheckerInstance.check(r.value)&&o.results.push(r.value),r.continue()):c()},n.onerror=this.onCursorError);else for(a=0;a<s;a++)this.errorOccured||((n=i.openCursor(IDBKeyRange.only(t[a]))).onsuccess=function(e){(r=e.target.result)?(o.results.push(r.value),r.continue()):c()},n.onerror=this.onCursorError)},t}(o.NotWhere)},function(e,t,r){"use strict";r.r(t),r.d(t,"NotWhere",function(){return c});var n,o=r(35),i=r(8),s=r(6),u=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),c=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return u(t,e),t.prototype.executeWhereUndefinedLogic=function(){if(this.query.order&&this.query.order.by)if(this.objectStore.indexNames.contains(this.query.order.by)){var e=this.query.order.type&&"desc"===this.query.order.type.toLowerCase()?"prev":"next";this.sorted=!0,this.cursorOpenRequest=this.objectStore.index(this.query.order.by).openCursor(null,e)}else{new i.LogHelper(s.ERROR_TYPE.ColumnNotExist,{ColumnName:this.query.order.by}).throw()}else this.cursorOpenRequest=this.objectStore.openCursor();this.skipRecord&&this.limitRecord?this.executeSkipAndLimitForNoWhere_():this.skipRecord?this.executeSkipForNoWhere_():this.limitRecord?this.executeLimitForNotWhere_():this.executeSimpleForNotWhere_(),this.cursorOpenRequest.onerror=function(e){this._errorOccured=!0,this.onErrorOccured(e)}.bind(this)},t.prototype.executeSkipAndLimitForNoWhere_=function(){var e,t=this,r=!1;this.cursorOpenRequest.onsuccess=function(n){(e=n.target.result)?r&&t.results.length!==t.limitRecord?(t.results.push(e.value),e.continue()):(r=!0,e.advance(t.skipRecord)):t.onQueryFinished()}},t.prototype.executeSkipForNoWhere_=function(){var e,t=this,r=!1;this.cursorOpenRequest.onsuccess=function(n){(e=n.target.result)?r?(t.results.push(e.value),e.continue()):(r=!0,e.advance(t.skipRecord)):t.onQueryFinished()}},t.prototype.executeSimpleForNotWhere_=function(){var e;this.cursorOpenRequest.onsuccess=function(t){(e=t.target.result)?(this.results.push(e.value),e.continue()):this.onQueryFinished()}.bind(this)},t.prototype.executeLimitForNotWhere_=function(){var e,t=this;this.cursorOpenRequest.onsuccess=function(r){(e=r.target.result)&&t.results.length!==t.limitRecord?(t.results.push(e.value),e.continue()):t.onQueryFinished()}},t}(o.BaseSelect)},function(e,t,r){"use strict";r.r(t),r.d(t,"BaseSelect",function(){return s});var n,o=r(36),i=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),s=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.results=[],t.sorted=!1,t}return i(t,e),t.prototype.removeDuplicates=function(){var e=this.results;this.results=void 0;var t=this.getPrimaryKey(this.query.from),r={};for(var n in e)r[e[n][t]]=e[n];for(var n in e=[],r)e.push(r[n]);this.results=e},t.prototype.onQueryFinished=function(){},t}(o.Base)},function(e,t,r){"use strict";r.r(t),r.d(t,"Base",function(){return a});var n,o=r(37),i=r(39),s=r(8),u=r(6),c=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),a=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.errorOccured=!1,t.errorCount=0,t.rowAffected=0,t.checkFlag=!1,t.onCursorError=function(e){t.errorOccured=!0,t.onErrorOccured(e)},t.goToWhereLogic=function(){var e=this,t=this.getObjectFirstKey(this.query.where);if(!0===this.query.ignoreCase&&(this.query.where=this.makeQryInCaseSensitive(this.query.where)),this.objectStore.indexNames.contains(t)){var r=this.query.where[t];if("object"==typeof r){this.checkFlag=Boolean(Object.keys(r).length>1||Object.keys(this.query.where).length>1),!0===this.checkFlag&&(this.whereCheckerInstance=new i.WhereChecker(this.query.where));var n=this.getObjectFirstKey(r);switch(n){case u.QUERY_OPTION.Like:var o=r[u.QUERY_OPTION.Like].split("%"),c=void 0,a=void 0;o[1]?(c=o[1],a=o.length>2?u.OCCURENCE.Any:u.OCCURENCE.Last):(c=o[0],a=u.OCCURENCE.First),a===u.OCCURENCE.First?(this.getAllCombinationOfWord(c).forEach(function(r){e.executeWhereLogic(t,{"-":{low:r,high:r+"￿"}},"-")}),delete this.query.where[t][u.QUERY_OPTION.Like]):this.executeLikeLogic(t,c,a);break;case u.QUERY_OPTION.In:this.executeInLogic(t,r[u.QUERY_OPTION.In]);break;case u.QUERY_OPTION.Between:case u.QUERY_OPTION.GreaterThan:case u.QUERY_OPTION.LessThan:case u.QUERY_OPTION.GreaterThanEqualTo:case u.QUERY_OPTION.LessThanEqualTo:this.executeWhereLogic(t,r,n);break;case u.QUERY_OPTION.Aggregate:break;default:this.executeWhereLogic(t,r)}}else this.checkFlag=Boolean(Object.keys(this.query.where).length>1),!0===this.checkFlag&&(this.whereCheckerInstance=new i.WhereChecker(this.query.where)),this.executeWhereLogic(t,r)}else{this.errorOccured=!0;var l=null==this.getColumnInfo(t)?new s.LogHelper(u.ERROR_TYPE.ColumnNotExist,{ColumnName:t}):new s.LogHelper(u.ERROR_TYPE.EnableSearchOff,{ColumnName:t});this.onErrorOccured(l,!0)}},t}return c(t,e),t.prototype.onErrorOccured=function(e,t){if(void 0===t&&(t=!1),++this.errorCount,1===this.errorCount)if(t)e.logError(),this.onError(e.get());else{var r=new s.LogHelper(e.target.error.name);r.message=e.target.error.message,r.logError(),this.onError(r.get())}},t.prototype.onExceptionOccured=function(e,t){switch(e.name){case"NotFoundError":var r=new s.LogHelper(u.ERROR_TYPE.TableNotExist,t);this.onErrorOccured(r,!0);break;default:console.error(e)}},t.prototype.getColumnInfo=function(e){var t;return this.getTable(this.tableName).columns.every(function(r){return r.name!==e||(t=r,!1)}),t},t.prototype.addGreatAndLessToNotOp=function(){var e,t=this.query.where;if(this.containsNot(t)){var r=Object.keys(t);if(1===r.length)r.forEach(function(r){null!=(e=t[r])[u.QUERY_OPTION.NotEqualTo]&&(t[r][u.QUERY_OPTION.GreaterThan]=e[u.QUERY_OPTION.NotEqualTo],void 0===t[u.QUERY_OPTION.Or]?(t[u.QUERY_OPTION.Or]={},t[u.QUERY_OPTION.Or][r]={}):void 0===t[u.QUERY_OPTION.Or][r]&&(t[u.QUERY_OPTION.Or][r]={}),t[u.QUERY_OPTION.Or][r][u.QUERY_OPTION.LessThan]=e[u.QUERY_OPTION.NotEqualTo],delete t[r][u.QUERY_OPTION.NotEqualTo])}),this.query.where=t;else{var n=[];r.forEach(function(r){var o={};null!=(e=t[r])[u.QUERY_OPTION.NotEqualTo]?(o[r]={},o[r][u.QUERY_OPTION.GreaterThan]=e[u.QUERY_OPTION.NotEqualTo],o[u.QUERY_OPTION.Or]={},o[u.QUERY_OPTION.Or][r]={},o[u.QUERY_OPTION.Or][r][u.QUERY_OPTION.LessThan]=e[u.QUERY_OPTION.NotEqualTo]):o[r]=e,n.push(o)}),this.query.where=n}}},t.prototype.makeQryInCaseSensitive=function(e){var t,r,n=[];for(var o in e)if("object"==typeof(t=e[o])){for(var i in t)switch(r=t[i],i){case u.QUERY_OPTION.In:n=n.concat(this.getAllCombinationOfWord(r,!0));break;case u.QUERY_OPTION.Like:break;default:n=n.concat(this.getAllCombinationOfWord(r))}e[o][u.QUERY_OPTION.In]=n}else n=n.concat(this.getAllCombinationOfWord(t)),e[o]={},e[o][u.QUERY_OPTION.In]=n;return e},t}(o.BaseHelper)},function(e,t,r){"use strict";r.r(t),r.d(t,"BaseHelper",function(){return s});var n=r(6),o=r(5),i=r(38),s=function(){function e(){}return Object.defineProperty(e.prototype,"activeDb",{get:function(){return o.IdbHelper.activeDb},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"dbConnection",{get:function(){return o.IdbHelper.dbConnection},enumerable:!0,configurable:!0}),e.prototype.getObjectFirstKey=function(e){return i.Util.getObjectFirstKey(e)},e.prototype.isNull=function(e){return i.Util.isNull(e)},e.prototype.getType=function(e){return i.Util.getType(e)},Object.defineProperty(e.prototype,"transaction",{get:function(){return o.IdbHelper.transaction},enumerable:!0,configurable:!0}),e.prototype.createTransaction=function(e,t,r){o.IdbHelper.createTransaction(e,t)},e.prototype.containsNot=function(e){var t=!1;return Object.keys(e).every(function(r){return null!=e[r][n.QUERY_OPTION.NotEqualTo]&&(t=!0),!t}),t},e.prototype.filterOnOccurence=function(e){var t=!1;switch(e=e.toLowerCase(),this.compSymbol){case n.OCCURENCE.Any:e.indexOf(this.compValue)>=0&&(t=!0);break;case n.OCCURENCE.First:0===e.indexOf(this.compValue)&&(t=!0);break;case n.OCCURENCE.Last:e.lastIndexOf(this.compValue)===e.length-this.compValueLength&&(t=!0);break;default:e!==this.compValue&&(t=!0)}return t},e.prototype.isTableExist=function(e){var t=!1;return this.activeDb.tables.every(function(r){return r.name!==e||(t=!0,!1)}),t},e.prototype.getTable=function(e){var t;return this.activeDb.tables.every(function(r){return r.name!==e||(t=r,!1)}),t},e.prototype.getKeyRange=function(e,t){var r;switch(t){case n.QUERY_OPTION.Between:r=IDBKeyRange.bound(e.low,e.high,!1,!1);break;case n.QUERY_OPTION.GreaterThan:r=IDBKeyRange.lowerBound(e,!0);break;case n.QUERY_OPTION.GreaterThanEqualTo:r=IDBKeyRange.lowerBound(e);break;case n.QUERY_OPTION.LessThan:r=IDBKeyRange.upperBound(e,!0);break;case n.QUERY_OPTION.LessThanEqualTo:r=IDBKeyRange.upperBound(e);break;default:r=IDBKeyRange.only(e)}return r},e.prototype.getPrimaryKey=function(e){var t=this.getTable(e).primaryKey;return t||this.getKeyPath(e)},e.prototype.getKeyPath=function(e){return this.dbConnection.transaction([e],"readonly").objectStore(e).keyPath},e.prototype.getAllCombinationOfWord=function(e,t){if(t){for(var r=[],n=0,o=e.length;n<o;n++)r=r.concat(this.getCombination_(e[n]));return r}return this.getCombination_(e)},e.prototype.getCombination_=function(e){var t=[],r=function(e,n,o){if(o===e.length)t.push(n.join(""));else{var i=e.charAt(o);n[o]=i.toLowerCase(),r(e,n,o+1),n[o]=i.toUpperCase(),r(e,n,o+1)}};return r(e,[],0),t},e}()},function(e,t,r){"use strict";r.r(t),r.d(t,"Util",function(){return o});var n=r(6),o=function(){function e(){}return e.isNull=function(e){if(null==e)return!0;switch(typeof e){case"string":return 0===e.length;case"number":return isNaN(e)}return!1},e.getObjectFirstKey=function(e){for(var t in e)return t;return null},e.getType=function(e){if(null===e)return n.DATA_TYPE.Null;var t=typeof e;switch(t){case"object":if(Array.isArray(e))return n.DATA_TYPE.Array;if(e.getDate&&e.getTime)return n.DATA_TYPE.DateTime;default:return t}},e}()},function(e,t,r){"use strict";r.r(t),r.d(t,"WhereChecker",function(){return o});var n=r(6),o=function(){function e(e){this.where=e}return e.prototype.check=function(e){var t;for(var r in this.status=!0,this.where){if(!this.status)break;if("object"==typeof(t=this.where[r]))for(var o in t){if(!this.status)break;switch(o){case n.QUERY_OPTION.In:this.checkIn(r,e[r]);break;case n.QUERY_OPTION.Like:this.checkLike(r,e[r]);break;case n.QUERY_OPTION.Between:case n.QUERY_OPTION.GreaterThan:case n.QUERY_OPTION.LessThan:case n.QUERY_OPTION.GreaterThanEqualTo:case n.QUERY_OPTION.LessThanEqualTo:case n.QUERY_OPTION.NotEqualTo:this.checkComparisionOp(r,e[r],o)}}else if(t!==e[r]){this.status=!1;break}}return this.status},e.prototype.checkIn=function(e,t){for(var r=0,o=this.where[e][n.QUERY_OPTION.In],i=o.length;r<i;r++){if(o[r]===t){this.status=!0;break}this.status=!1}},e.prototype.checkLike=function(e,t){var r,o,i,s=this.where[e][n.QUERY_OPTION.Like].split("%");switch(s[1]?(o=s[1],r=s.length>2?n.OCCURENCE.Any:n.OCCURENCE.Last):(o=s[0],r=n.OCCURENCE.First),t=t.toLowerCase(),r){case n.OCCURENCE.Any:(i=t.indexOf(o.toLowerCase()))<0&&(this.status=!1);break;case n.OCCURENCE.First:((i=t.indexOf(o.toLowerCase()))>0||i<0)&&(this.status=!1);break;default:(i=t.lastIndexOf(o.toLowerCase()))<t.length-o.length&&(this.status=!1)}},e.prototype.checkComparisionOp=function(e,t,r){var o=this.where[e][r];switch(r){case n.QUERY_OPTION.GreaterThan:t<=o&&(this.status=!1);break;case n.QUERY_OPTION.LessThan:t>=o&&(this.status=!1);break;case n.QUERY_OPTION.LessThanEqualTo:t>o&&(this.status=!1);break;case n.QUERY_OPTION.GreaterThanEqualTo:t<o&&(this.status=!1);break;case n.QUERY_OPTION.Between:(t<o.Low||t>o.High)&&(this.status=!1);break;case n.QUERY_OPTION.NotEqualTo:t===o&&(this.status=!1)}},e}()},function(e,t,r){"use strict";r.r(t),r.d(t,"Join",function(){return c});var n,o=r(35),i=r(28),s=r(6),u=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),c=function(e){function t(t,r,n){var o=e.call(this)||this;o.queryStack=[],o.currentQueryStackIndex=0,o.onSuccess=r,o.onError=n,o.query=t;var s=[],u=function(e){return void 0!==e.table1?(e.table2.joinType=void 0===e.join?"inner":e.join.toLowerCase(),o.queryStack.push(e.table2),o.queryStack.length%2==0&&(o.queryStack[o.queryStack.length-1].nextJoin=e.nextJoin),s.push(e.table2.table),u(e.table1)):(o.queryStack.push(e),void s.push(e.table))};(u(t.from),o.queryStack.reverse(),o.errorOccured)||new i.Instance({from:o.queryStack[0].table,where:o.queryStack[0].where},function(e){var t=o.queryStack[0].table;e.forEach(function(e,r){o.results[r]={},o.results[r][t]=e}),o.startExecutionJoinLogic_()},o.onErrorOccured).execute();return o}return u(t,e),t.prototype.onTransactionCompleted_=function(e){null!=this.onSuccess&&this.queryStack.length===this.currentQueryStackIndex+1&&(this.query[s.QUERY_OPTION.Count]?this.onSuccess(this.results.length):(this.query[s.QUERY_OPTION.Skip]&&this.query[s.QUERY_OPTION.Limit]?(this.results.splice(0,this.query[s.QUERY_OPTION.Skip]),this.results.splice(this.query[s.QUERY_OPTION.Limit]-1,this.results.length)):this.query[s.QUERY_OPTION.Skip]?this.results.splice(0,this.query[s.QUERY_OPTION.Skip]):this.query[s.QUERY_OPTION.Limit]&&this.results.splice(this.query[s.QUERY_OPTION.Limit]-1,this.results.length),this.onSuccess(this.results)))},t.prototype.executeWhereJoinLogic_=function(e,t){var r,n=this,o=[],s=(t.column,this.results),u=s.length,c=0;new i.Instance({from:t.table,order:t.order,where:t.where},function(t){t.forEach(function(t,n){for(var o=0;o<u;o++)r=s[o][e.table][e.column],a(r,t,o)}),n.results=o,n.queryStack.length>n.currentQueryStackIndex+1?n.startExecutionJoinLogic_():n.onTransactionCompleted_(null)},this.onErrorOccured).execute();var a=function(e,r,i){if(o[c]={},e===r[t.column]){o[c][t.table]=r;for(var u=0;u<n.currentQueryStackIndex;u++)o[c][n.queryStack[u].table]=s[i][n.queryStack[u].table];++c}else if("left"===t.joinType){o[c]={},o[c][t.table]=null;for(u=0;u<n.currentQueryStackIndex;u++)o[c][n.queryStack[u].table]=s[i][n.queryStack[u].table];++c}}},t.prototype.executeRightJoin_=function(e,t){var r=this,n=[],o=(t.column,this.results),s=o.length,u=0;new i.Instance({from:t.table,order:t.order,where:t.where},function(i){!function(i){var c=!1;i.forEach(function(r,i){for(u=0;u<s;u++)if(r[t.column]===o[u][e.table][e.column]){c=!0;break}if(n[i]={},n[i][t.table]=r,c){c=!1;for(var a=0;a<this.currentQueryStackIndex;a++)n[i][this.queryStack[a].table]=o[u][this.queryStack[a].table]}else for(a=0;a<this.currentQueryStackIndex;a++)n[i][this.queryStack[a].table]=null},r)}(i),r.results=n,r.queryStack.length>r.currentQueryStackIndex+1?r.startExecutionJoinLogic_():r.onTransactionCompleted_(null)},r.onErrorOccured).execute()},t.prototype.executeWhereUndefinedLogicForJoin_=function(e,t){var r=this,n=[],o=(t.column,this.results),s={},u=o.length,c=0,a=0,l=function(){a<u?r.errorOccured||(s[t.column]=o[a][e.table][e.column],new i.Instance({from:t.table,order:t.order,where:s},function(e){!function(e){if(e.length>0)e.forEach(function(e){n[c]={},n[c][t.table]=e;for(var i=0;i<r.currentQueryStackIndex;i++)n[c][r.queryStack[i].table]=o[a][r.queryStack[i].table];++c});else if("left"===t.joinType){n[c]={},n[c][t.table]=null;for(var i=0;i<r.currentQueryStackIndex;i++)n[c][r.queryStack[i].table]=o[a][r.queryStack[i].table];++c}}(e),++a,l()},r.onErrorOccured.bind(r)).execute()):(r.results=n,r.queryStack.length>r.currentQueryStackIndex+1?r.startExecutionJoinLogic_():r.onTransactionCompleted_(null))};l()},t.prototype.startExecutionJoinLogic_=function(){var e;this.currentQueryStackIndex>=1&&this.currentQueryStackIndex%2==1?(e={column:this.queryStack[this.currentQueryStackIndex].nextJoin.column,table:this.queryStack[this.currentQueryStackIndex].nextJoin.table},this.currentQueryStackIndex++):e=this.queryStack[this.currentQueryStackIndex++];var t=this.queryStack[this.currentQueryStackIndex];"right"===t.joinType?this.executeRightJoin_(e,t):t.where?this.executeWhereJoinLogic_(e,t):this.executeWhereUndefinedLogicForJoin_(e,t)},t}(o.BaseSelect)},function(e,t,r){"use strict";r.r(t);var n=r(42);r.d(t,"Instance",function(){return n.Instance})},function(e,t,r){"use strict";r.r(t),r.d(t,"Instance",function(){return a});var n,o=r(43),i=r(27),s=r(8),u=r(6),c=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),a=function(e){function t(t,r,n){var o=e.call(this)||this;return o.onError=n,o.onSuccess=r,o.query=t,o}return c(t,e),t.prototype.execute=function(){var e=this;if(this.isTableExist(this.query.from))try{if(void 0!==this.query.where)if(this.addGreatAndLessToNotOp(),this.query.where.or||Array.isArray(this.query.where))new i.Instance(this.query,function(t){e.resultCount=t.length,e.onTransactionCompleted_()},this.onError).execute();else this.initTransaction_(),this.goToWhereLogic();else this.initTransaction_(),this.executeWhereUndefinedLogic()}catch(e){this.onExceptionOccured(e,{TableName:this.query.from})}else this.errorOccured=!0,this.onErrorOccured(new s.LogHelper(u.ERROR_TYPE.TableNotExist,{TableName:this.query.from}),!0)},t.prototype.initTransaction_=function(){this.createTransaction([this.query.from],this.onTransactionCompleted_,u.IDB_MODE.ReadOnly),this.objectStore=this.transaction.objectStore(this.query.from)},t}(o.Where)},function(e,t,r){"use strict";r.r(t),r.d(t,"Where",function(){return s});var n,o=r(44),i=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),s=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.executeWhereLogic=function(e,t,r){var n,o,i=this;t=r?t[r]:t,this.checkFlag?(n=this.objectStore.index(e).openCursor(this.getKeyRange(t,r))).onsuccess=function(e){(o=e.target.result)?(i.whereCheckerInstance.check(o.value)&&++i.resultCount,o.continue()):i.onQueryFinished()}:this.objectStore.count?(n=this.objectStore.index(e).count(this.getKeyRange(t,r))).onsuccess=function(){i.resultCount=n.result,i.onQueryFinished()}:(n=this.objectStore.index(e).openCursor(this.getKeyRange(t,r))).onsuccess=function(e){(o=e.target.result)?(++i.resultCount,o.continue()):i.onQueryFinished()},n.onerror=function(e){i.errorOccured=!0,i.onErrorOccured(e)}},t}(o.Like)},function(e,t,r){"use strict";r.r(t),r.d(t,"Like",function(){return s});var n,o=r(45),i=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),s=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.executeLikeLogic=function(e,t,r){var n,o=this;this.compValue=t.toLowerCase(),this.compValueLength=this.compValue.length,this.compSymbol=r;var i=this.objectStore.index(e).openCursor();i.onerror=this.onCursorError,this.checkFlag?i.onsuccess=function(e){(n=e.target.result)?(o.filterOnOccurence(n.key)&&o.whereCheckerInstance.check(n.value)&&++o.resultCount,n.continue()):o.onQueryFinished()}:i.onsuccess=function(e){(n=e.target.result)?(o.filterOnOccurence(n.key)&&++o.resultCount,n.continue()):o.onQueryFinished()}},t}(o.In)},function(e,t,r){"use strict";r.r(t),r.d(t,"In",function(){return s});var n,o=r(46),i=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),s=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.executeInLogic=function(e,t){var r,n,o=this,i=this.objectStore.index(e),s=t.length,u=0,c=function(){++u===s&&o.onQueryFinished()};if(this.checkFlag)for(var a=0;a<s;a++)this.errorOccured||((n=i.openCursor(IDBKeyRange.only(t[a]))).onsuccess=function(e){(r=e.target.result)?(o.whereCheckerInstance.check(r.value)&&++o.resultCount,r.continue()):c()},n.onerror=this.onCursorError);else if(this.objectStore.count)for(a=0;a<s;a++)this.errorOccured||((n=i.count(IDBKeyRange.only(t[a]))).onsuccess=function(e){o.resultCount+=e.target.result,c()},n.onerror=this.onCursorError);else for(a=0;a<s;a++)this.errorOccured||((n=i.openCursor(IDBKeyRange.only(t[a]))).onsuccess=function(e){(r=e.target.result)?(++o.resultCount,r.continue()):c()},n.onerror=this.onCursorError)},t}(o.NotWhere)},function(e,t,r){"use strict";r.r(t),r.d(t,"NotWhere",function(){return s});var n,o=r(47),i=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),s=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.executeWhereUndefinedLogic=function(){var e=this;if(this.objectStore.count){var t=this.objectStore.count();t.onsuccess=function(){e.resultCount=t.result,e.onQueryFinished()},t.onerror=this.onCursorError}else{var r,n=this.objectStore.openCursor();n.onsuccess=function(e){(r=e.target.result)?(++this._resultCount,r.continue()):this.onQueryFinished()}.bind(this),n.onerror=this.onCursorError}},t}(o.BaseCount)},function(e,t,r){"use strict";r.r(t),r.d(t,"BaseCount",function(){return s});var n,o=r(36),i=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),s=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.resultCount=0,t.onTransactionCompleted_=function(){!1===t.errorOccured&&t.onSuccess(t.resultCount)},t}return i(t,e),t.prototype.onQueryFinished=function(){!0===this.isTransaction&&this.onTransactionCompleted_()},t}(o.Base)},function(e,t,r){"use strict";r.r(t);var n=r(49);r.d(t,"Instance",function(){return n.Instance})},function(e,t,r){"use strict";r.r(t),r.d(t,"Instance",function(){return a});var n,o=r(36),i=r(6),s=r(8),u=r(50),c=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),a=function(e){function t(t,r,n){var o=e.call(this)||this;return o._valuesAffected=[],o.onTransactionCompleted_=function(){!1===o.errorOccured&&o.onSuccess(o.query.return?o._valuesAffected:o.rowAffected)},o.onError=n,o.query=t,o.onSuccess=r,o.tableName=o.query.into,o}return c(t,e),t.prototype.execute=function(){var e=this,t=this.getTable(this.tableName);if(Array.isArray(this.query.values))if(t)try{if(this.query.skipDataCheck)this.insertData(this.query.values);else{var r=new u.ValuesChecker(t,this.query.values);r.checkAndModifyValues(function(t){t?e.onErrorOccured(r.error,!0):e.insertData(r.values),r=void 0})}this.query.values=void 0}catch(e){this.onExceptionOccured(e,{TableName:this.tableName})}else new s.LogHelper(i.ERROR_TYPE.TableNotExist,{TableName:this.tableName}).throw();else this.onErrorOccured(new s.LogHelper(i.ERROR_TYPE.NotArray),!0)},t.prototype.onQueryFinished=function(){!0===this.isTransaction&&this.onTransactionCompleted_()},t.prototype.insertData=function(e){var t,r=this,n=0;t=this.query.return?function(i){if(i){var s=o.add(i);s.onerror=r.onErrorOccured.bind(r),s.onsuccess=function(o){r._valuesAffected.push(i),t.call(r,e[n++])}}else r.onQueryFinished()}:function(i){if(i){var s=o.add(i);s.onerror=r.onErrorOccured.bind(r),s.onsuccess=function(o){++r.rowAffected,t.call(r,e[n++])}}else r.onQueryFinished()},this.createTransaction([this.query.into],this.onTransactionCompleted_);var o=this.transaction.objectStore(this.query.into);t(e[n++])},t}(o.Base)},function(e,t,r){"use strict";r.r(t),r.d(t,"ValuesChecker",function(){return s});var n=r(51),o=r(4),i=r(1),s=function(){function e(e,t){this.table=e,this.values=t}return e.prototype.checkAndModifyValues=function(e){var t=this;this.onFinish=e;var r={};this.table.columns.filter(function(e){return e.autoIncrement}).forEach(function(e){var n="JsStore_"+o.IdbHelper.activeDb.name+"_"+t.table.name+"_"+e.name+"_Value";i.get(n,function(t){r[e.name]=t})}),i.get("dumy_key",function(e){t.valueCheckerObj=new n.ValueChecker(t.table,r),t.startChecking()},function(e){t.error=e,t.onFinish(!0)})},e.prototype.startChecking=function(){var e=this,t=!1;if(this.values.every(function(r){return!(t=e.valueCheckerObj.checkAndModifyValue(r))}),t)this.error=this.valueCheckerObj.error,this.onFinish(!0);else{for(var r=0,n=Object.keys(this.valueCheckerObj.autoIncrementValue);r<n.length;r++){var s=n[r],u="JsStore_"+o.IdbHelper.activeDb.name+"_"+this.table.name+"_"+s+"_Value";i.set(u,this.valueCheckerObj.autoIncrementValue[s])}i.get("dumy_key",function(t){e.onFinish(!1)},function(t){e.error=t,e.onFinish(!0)})}},e}()},function(e,t,r){"use strict";r.r(t),r.d(t,"ValueChecker",function(){return s});var n=r(38),o=r(6),i=r(8),s=function(){function e(e,t){this.errorOccured=!1,this.autoIncrementValue={},this.table=e,this.autoIncrementValue=t}return e.prototype.checkAndModifyValue=function(e){var t=this;return this.value=e,this.table.columns.every(function(e){return t.checkAndModifyColumnValue_(e),!t.errorOccured}),this.errorOccured},e.prototype.isNull_=function(e){return n.Util.isNull(e)},e.prototype.getType_=function(e){return n.Util.getType(e)},e.prototype.checkNotNullAndDataType_=function(e){e.notNull&&this.isNull_(this.value[e.name])?this.onValidationError_(o.ERROR_TYPE.NullValue,{ColumnName:e.name}):e.dataType&&!this.isNull_(this.value[e.name])&&this.getType_(this.value[e.name])!==e.dataType&&this.onValidationError_(o.ERROR_TYPE.BadDataType,{ColumnName:e.name})},e.prototype.checkAndModifyColumnValue_=function(e){e.autoIncrement?this.value[e.name]=++this.autoIncrementValue[e.name]:e.default&&this.isNull_(this.value[e.name])&&(this.value[e.name]=e.default),this.checkNotNullAndDataType_(e)},e.prototype.onValidationError_=function(e,t){this.errorOccured=!0,this.error=new i.LogHelper(e,t)},e}()},function(e,t,r){"use strict";r.r(t);var n=r(53);r.d(t,"Instance",function(){return n.Instance})},function(e,t,r){"use strict";r.r(t),r.d(t,"Instance",function(){return c});var n,o=r(54),i=r(27),s=r(6),u=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),c=function(e){function t(t,r,n){var o=e.call(this)||this;return o.onTransactionCompleted_=function(){!1===o.errorOccured&&o.onSuccess(o.rowAffected)},o.query=t,o.onSuccess=r,o.onError=n,o}return u(t,e),t.prototype.execute=function(){try{void 0!==this.query.where?(this.addGreatAndLessToNotOp(),this.initTransaction_(),Array.isArray(this.query.where)?this.processWhereArrayQry():this.processWhere_()):(this.initTransaction_(),this.executeWhereUndefinedLogic())}catch(e){this.errorOccured=!0,this.onExceptionOccured(e,{TableName:this.query.from})}},t.prototype.processWhereArrayQry=function(){var e=this;new i.Instance(this.query,function(t){var r=[],n=e.getPrimaryKey(e.query.from);t.forEach(function(e){r.push(e[n])}),t=null,e.query.where={},e.query.where[n]={},e.query.where[n][s.QUERY_OPTION.In]=r,e.processWhere_()},this.onError).execute()},t.prototype.processWhere_=function(){this.query.where.or&&this.processOrLogic(),this.goToWhereLogic()},t.prototype.initTransaction_=function(){this.createTransaction([this.query.from],this.onTransactionCompleted_),this.objectStore=this.transaction.objectStore(this.query.from)},t.prototype.onQueryFinished=function(){!0===this.isOr?this.orQuerySuccess_():!0===this.isTransaction&&this.onTransactionCompleted_()},t.prototype.orQuerySuccess_=function(){var e=this.getObjectFirstKey(this._orInfo.OrQuery);if(null!=e){var t={};t[e]=this._orInfo.OrQuery[e],delete this._orInfo.OrQuery[e],this.query.where=t,this.goToWhereLogic()}else this.isOr=!0},t.prototype.processOrLogic=function(){this.isOr=!0,this._orInfo={OrQuery:this.query.where.or},delete this.query.where.or},t}(o.Where)},function(e,t,r){"use strict";r.r(t),r.d(t,"Where",function(){return s});var n,o=r(55),i=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),s=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.executeWhereLogic=function(e,t,r){var n,o,i=this;t=r?t[r]:t,o=this.objectStore.index(e).openCursor(this.getKeyRange(t,r)),this.checkFlag?o.onsuccess=function(e){(n=e.target.result)?(i.whereCheckerInstance.check(n.value)&&(n.delete(),++i.rowAffected),n.continue()):i.onQueryFinished()}:o.onsuccess=function(e){(n=e.target.result)?(n.delete(),++i.rowAffected,n.continue()):i.onQueryFinished()},o.onerror=function(e){i.errorOccured=!0,i.onErrorOccured(e)}},t}(o.Like)},function(e,t,r){"use strict";r.r(t),r.d(t,"Like",function(){return s});var n,o=r(56),i=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),s=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.executeLikeLogic=function(e,t,r){var n,o=this;this.compValue=t.toLowerCase(),this.compValueLength=this.compValue.length,this.compSymbol=r;var i=this.objectStore.index(e).openCursor();i.onerror=function(e){o.errorOccured=!0,o.onErrorOccured(e)},this.checkFlag?i.onsuccess=function(e){(n=e.target.result)?(o.filterOnOccurence(n.key)&&o.whereCheckerInstance.check(n.value)&&(n.delete(),++o.rowAffected),n.continue()):o.onQueryFinished()}:i.onsuccess=function(e){(n=e.target.result)?(o.filterOnOccurence(n.key)&&(n.delete(),++o.rowAffected),n.continue()):o.onQueryFinished()}},t}(o.In)},function(e,t,r){"use strict";r.r(t),r.d(t,"In",function(){return s});var n,o=r(57),i=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),s=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.executeInLogic=function(e,t){var r,n,o=this,i=t.length,s=0,u=function(){++s===i&&o.onQueryFinished()};if(this.checkFlag)for(var c=0;c<i;c++)this.errorOccured||((n=this.objectStore.index(e).openCursor(IDBKeyRange.only(t[c]))).onsuccess=function(e){(r=e.target.result)?(o.whereCheckerInstance.check(r.value)&&(r.delete(),++o.rowAffected),r.continue()):u()},n.onerror=this.onCursorError);else for(c=0;c<i;c++)this.errorOccured||((n=this.objectStore.index(e).openCursor(IDBKeyRange.only(t[c]))).onsuccess=function(e){(r=e.target.result)?(r.delete(),++o.rowAffected,r.continue()):u()},n.onerror=this.onCursorError)},t}(o.NotWhere)},function(e,t,r){"use strict";r.r(t),r.d(t,"NotWhere",function(){return s});var n,o=r(58),i=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),s=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.executeWhereUndefinedLogic=function(){var e,t=this,r=this.objectStore.openCursor();r.onsuccess=function(r){(e=r.target.result)?(e.delete(),++t.rowAffected,e.continue()):t.onQueryFinished()},r.onerror=function(e){t.errorOccured=!0,t.onErrorOccured(e)}},t}(o.BaseRemove)},function(e,t,r){"use strict";r.r(t),r.d(t,"BaseRemove",function(){return s});var n,o=r(36),i=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),s=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.onQueryFinished=function(){},t}(o.Base)},function(e,t,r){"use strict";r.r(t);var n=r(60);r.d(t,"Instance",function(){return n.Instance})},function(e,t,r){"use strict";r.r(t),r.d(t,"Instance",function(){return a});var n,o=r(61),i=r(27),s=r(66),u=r(6),c=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),a=function(e){function t(t,r,n){var o=e.call(this)||this;return o.onSuccess=r,o.onError=n,o.query=t,o}return c(t,e),t.prototype.execute=function(){try{this.error=new s.SchemaChecker(this.getTable(this.query.in)).check(this.query.set,this.query.in),this.error?(this.errorOccured=!0,this.onErrorOccured(this.error,!0)):void 0!==this.query.where?(this.addGreatAndLessToNotOp(),this.query.where.or||Array.isArray(this.query.where)?this.executeComplexLogic_():(this.initTransaction(),this.goToWhereLogic())):(this.initTransaction(),this.executeWhereUndefinedLogic())}catch(e){this.errorOccured=!0,this.onExceptionOccured.call(this,e,{TableName:this.query.in})}},t.prototype.executeComplexLogic_=function(){var e=this;new i.Instance({from:this.query.in,where:this.query.where},function(t){var r,n=e.getPrimaryKey(e.query.in),o=[],i={};t.forEach(function(e){o.push(e[n])}),t=null,i[n]=((r={})[u.QUERY_OPTION.In]=o,r),e.query[u.QUERY_OPTION.Where]=i,e.initTransaction(),e.goToWhereLogic()},this.onError).execute()},t}(o.Where)},function(e,t,r){"use strict";r.r(t),r.d(t,"Where",function(){return u});var n,o=r(62),i=r(63),s=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),u=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return s(t,e),t.prototype.executeWhereLogic=function(e,t,r){var n,i,s=this;t=r?t[r]:t,i=this.objectStore.index(e).openCursor(this.getKeyRange(t,r)),this.checkFlag?i.onsuccess=function(e){(n=e.target.result)?(s.whereCheckerInstance.check(n.value)&&(n.update(Object(o.updateValue)(s.query.set,n.value)),++s.rowAffected),n.continue()):s.onQueryFinished()}:i.onsuccess=function(e){(n=e.target.result)?(n.update(Object(o.updateValue)(s.query.set,n.value)),++s.rowAffected,n.continue()):s.onQueryFinished()},i.onerror=function(e){s.errorOccured=!0,s.onErrorOccured(e)}},t}(i.Like)},function(e,t,r){"use strict";r.r(t),r.d(t,"updateValue",function(){return u}),r.d(t,"BaseUpdate",function(){return c});var n,o=r(36),i=r(6),s=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),u=function(e,t){for(var r in e)if(typeof e[r]!==i.DATA_TYPE.Object)t[r]=e[r];else for(var n in e[r]){switch(n){case"+":t[r]+=e[r][n];break;case"-":t[r]-=e[r][n];break;case"*":t[r]*=e[r][n];break;case"/":t[r]/=e[r][n];break;default:t[r]=e[r]}break}return t},c=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.onTransactionCompleted_=function(){!1===t.errorOccured&&t.onSuccess(t.rowAffected)},t}return s(t,e),t.prototype.initTransaction=function(){this.createTransaction([this.query.in],this.onTransactionCompleted_),this.objectStore=this.transaction.objectStore(this.query.in)},t.prototype.onQueryFinished=function(){!0===this.isTransaction&&this.onTransactionCompleted_()},t}(o.Base)},function(e,t,r){"use strict";r.r(t),r.d(t,"Like",function(){return u});var n,o=r(64),i=r(62),s=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),u=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return s(t,e),t.prototype.executeLikeLogic=function(e,t,r){var n,o=this;this.compValue=t.toLowerCase(),this.compValueLength=this.compValue.length,this.compSymbol=r;var s=this.objectStore.index(e).openCursor();s.onerror=function(e){o.errorOccured=!0,o.onErrorOccured(e)},this.checkFlag?s.onsuccess=function(e){(n=e.target.result)?(o.filterOnOccurence(n.key)&&o.whereCheckerInstance.check(n.value)&&(n.update(Object(i.updateValue)(o.query.set,n.value)),++o.rowAffected),n.continue()):o.onQueryFinished()}:s.onsuccess=function(e){(n=e.target.result)?(o.filterOnOccurence(n.key)&&(n.update(Object(i.updateValue)(o.query.set,n.value)),++o.rowAffected),n.continue()):o.onQueryFinished()}},t}(o.In)},function(e,t,r){"use strict";r.r(t),r.d(t,"In",function(){return u});var n,o=r(65),i=r(62),s=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),u=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return s(t,e),t.prototype.executeInLogic=function(e,t){var r,n,o=this,s=this.objectStore.index(e),u=t.length,c=0,a=function(){++c===u&&o.onQueryFinished()};if(this.checkFlag)for(var l=0;l<u;l++)this.errorOccured||((n=s.openCursor(IDBKeyRange.only(t[l]))).onsuccess=function(e){(r=e.target.result)?(o.whereCheckerInstance.check(r.value)&&(r.update(Object(i.updateValue)(o.query.set,r.value)),++o.rowAffected),r.continue()):a()},n.onerror=this.onCursorError);else for(l=0;l<u;l++)this.errorOccured||((n=s.openCursor(IDBKeyRange.only(t[l]))).onsuccess=function(e){(r=e.target.result)?(r.update(Object(i.updateValue)(o.query.set,r.value)),++o.rowAffected,r.continue()):a()},n.onerror=this.onCursorError)},t}(o.NotWhere)},function(e,t,r){"use strict";r.r(t),r.d(t,"NotWhere",function(){return s});var n,o=r(62),i=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),s=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.executeWhereUndefinedLogic=function(){var e,t=this,r=this.objectStore.openCursor();r.onsuccess=function(r){(e=r.target.result)?(e.update(Object(o.updateValue)(t.query.set,e.value)),++t.rowAffected,e.continue()):t.onQueryFinished()},r.onerror=function(e){t.errorOccured=!0,t.onErrorOccured(e)}},t}(o.BaseUpdate)},function(e,t,r){"use strict";r.r(t),r.d(t,"SchemaChecker",function(){return s});var n=r(8),o=r(6),i=r(38),s=function(){function e(e){this.table=e}return e.prototype.check=function(e,t){var r=this,i=null;return typeof e===o.DATA_TYPE.Object?this.table?this.table.columns.every(function(t){return null===i&&(t.name in e&&(i=r.checkByColumn_(t,e[t.name])),!0)}):i=new n.LogHelper(o.ERROR_TYPE.TableNotExist,{TableName:t}):i=new n.LogHelper(o.ERROR_TYPE.NotObject),i},e.prototype.isNull_=function(e){return i.Util.isNull(e)},e.prototype.getType_=function(e){return i.Util.getType(e)},e.prototype.checkByColumn_=function(e,t){var r=null;e.notNull&&this.isNull_(t)&&(r=new n.LogHelper(o.ERROR_TYPE.NullValue,{ColumnName:e.name}));var i=this.getType_(t);if(e.dataType&&i!==e.dataType&&"object"!==i&&(r=new n.LogHelper(o.ERROR_TYPE.BadDataType,{ColumnName:e.name})),"object"===i)for(var s=["+","-","*","/"],u=0,c=Object.keys(t);u<c.length;u++){var a=c[u];s.indexOf(a)<0&&e.dataType&&i!==e.dataType&&(r=new n.LogHelper(o.ERROR_TYPE.BadDataType,{ColumnName:e.name}));break}return r},e}()},function(e,t,r){"use strict";r.r(t),r.d(t,"Clear",function(){return u});var n,o=r(36),i=r(1),s=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),u=function(e){function t(t,r,n){var o=e.call(this)||this;return o.query=t,o.onSuccess=r,o.onError=n,o}return s(t,e),t.prototype.execute=function(){var e=this;this.createTransaction([this.query],function(){!1===e.errorOccured&&e.onSuccess()});var t=this.transaction.objectStore(this.query).clear();t.onsuccess=function(t){e.getTable(e.query).columns.forEach(function(t){t.autoIncrement&&i.set("JsStore_"+e.activeDb.name+"_"+e.query+"_"+t.name+"_Value",0)})},t.onerror=function(t){e.errorOccured=!0,e.onErrorOccured(t)}},t}(o.Base)},function(e,t,r){"use strict";r.r(t),r.d(t,"BulkInsert",function(){return c});var n,o=r(36),i=r(6),s=r(8),u=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),c=function(e){function t(t,r,n){var o=e.call(this)||this;return o.query=t,o.onSuccess=r,o.onError=n,o}return u(t,e),t.prototype.execute=function(){if(Array.isArray(this.query.values))if(!0===this.isTableExist(this.query.into))try{this.bulkinsertData(this.query.values),this.query.values=null}catch(e){this.onExceptionOccured(e,{TableName:this.query.into})}else{new s.LogHelper(i.ERROR_TYPE.TableNotExist,{TableName:this.query.into}).throw()}else this.onErrorOccured(new s.LogHelper(i.ERROR_TYPE.NotArray),!0)},t.prototype.bulkinsertData=function(e){var t=this;this.createTransaction([this.query.into],function(){t.onSuccess()}),this.objectStore=this.transaction.objectStore(this.query.into);for(var r=0,n=e.length;r<n;r++)this.objectStore.add(e[r])},t}(o.Base)}])}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,